<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++一个简单的删除句子中元音字符的程序</title>
      <link href="/2021/09/09/c-yi-ge-jian-dan-de-shan-chu-ju-zi-zhong-yuan-yin-zi-fu-de-cheng-xu/"/>
      <url>/2021/09/09/c-yi-ge-jian-dan-de-shan-chu-ju-zi-zhong-yuan-yin-zi-fu-de-cheng-xu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c++"><code class="language-c++">#include <iostream>using namespace std;void main(){    char c;    string str;    while(c = getchar())    {        if(c == '\n')        {            break;        }            if(c=='A'||c=='E'||c=='I'||c=='O'||c=='U'||c=='a'||c=='e'||c=='i'||c=='o'||c=='u')        {                    }        else            str+=c;    }    cout<<str.c_str()<<endl;    system("pause");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习细节</title>
      <link href="/2021/02/06/shen-du-xue-xi-xi-jie/"/>
      <url>/2021/02/06/shen-du-xue-xi-xi-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch"><a href="#Pytorch" class="headerlink" title="Pytorch"></a>Pytorch</h1><h2 id="nn内部的关系"><a href="#nn内部的关系" class="headerlink" title="nn内部的关系"></a>nn内部的关系</h2><ol><li><p>叶子张量leaf tensor: 反向传播时，只保留属性requires_grad和is_leaf为真的导数</p></li><li><p>requires_grad为真，is_leaf为假时，此张量的导数作为中间结果用于计算叶子节点的导数</p></li><li><p>requires_grad为假，is_leaf为假时，此张量不参与求导。 </p></li><li><p>叶子张量的作用：节省内存或者显存</p></li><li><p>叶子节点的grad_fn都为空</p></li><li><p>非叶子节点的grad_fn都不为空</p></li><li><p>如果想保留中间变量的导数，通过使用tensor.retain_grad()</p></li><li><p>如果我们只想debug，只需要输出中间变量的导数信息，而不需要保存他们，我们还可以使用tensor.register_hook</p></li><li><p>inplace操作：在不更改变量内存地址的情况下，直接修改变量的值就叫做inplace操作。在autograd中记录的是变量的地址值</p></li><li><p>pytorch通过tensor._version检测tensor发生了inplace操作</p></li><li><p>每次tensor进行inplace时，_version的值就会加1，在正向传播过程中，求导系统记录的b的version是0，但是反向传播过程中，求导系统发现b的version变成了1。<br>对于requires_grad=True的叶子节点的值，在求梯度之前，是不允许修改的。</p></li><li><p>在backward之前，我们想修改叶子节点，必须按照一定的规则<br>第一种方法：a.data.fill_()<br>第二种方法：with torch.no_grad():</p></li><li><p>nn.Conv2d如果后面加BN操作就不用加偏置，因为加不加偏置在BN之后效果一样，加入偏置后反而会增加显存</p><h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2></li><li><p>np.randm.choice(x,1)# 从x中随机选一个数</p><h2 id="Cuda编程"><a href="#Cuda编程" class="headerlink" title="Cuda编程"></a>Cuda编程</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210131085434671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Grid管理Block，Block管理线程Thread</p><h3 id="cuda中threadIdx、blockIdx、blockDim和gridDim的使用"><a href="#cuda中threadIdx、blockIdx、blockDim和gridDim的使用" class="headerlink" title="cuda中threadIdx、blockIdx、blockDim和gridDim的使用"></a>cuda中threadIdx、blockIdx、blockDim和gridDim的使用</h3></li><li><p>threadIdx是一个uint3类型，表示一个线程的索引</p></li><li><p>blockIdx是一个uint3类型，表示一个线程块的索引，一个线程块中通常有多个线程。</p></li><li><p>blockDim是一个dim3类型，表示线程块的大小。</p></li><li><p>gridDim是一个dim3类型，表示网格的大小，一个网格中通常有多个线程块。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20210131090146535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="pycuda"><a href="#pycuda" class="headerlink" title="pycuda"></a>pycuda</h3><p>gpuarray.to_gpu(cpu_data)把cpu的数据转到gpu上，但是之后直接去进行运算操作会比价慢。<br>更快的方法为：<br>gpu_2x_ker=ElementwiseKernel(<br>“float <em>in, float *out”,<br>“out[i] = 2</em>in[i];”,<br>“gpu_2x_ker”<br>)</p></li></ol><pre class="line-numbers language-csharp"><code class="language-csharp">import pycuda<span class="token punctuation">.</span>autoinitimport pycuda<span class="token punctuation">.</span>gpuarray <span class="token keyword">as</span> gpuarrayimport numpy <span class="token keyword">as</span> npimport pbdnum <span class="token operator">=</span> <span class="token number">4</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>B <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>A_GPU <span class="token operator">=</span> gpuarray<span class="token punctuation">.</span><span class="token function">to_gpu</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">astype</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>B_GPU <span class="token operator">=</span> gpuarray<span class="token punctuation">.</span><span class="token function">to_gpu</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">astype</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>C_GPU <span class="token operator">=</span> A_GPU <span class="token operator">+</span> B_GPUC <span class="token operator">=</span> C_GPU<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'A='</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'B='</span><span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'C='</span><span class="token punctuation">,</span> C<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pycuda写hello world</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property"># 对cuda初始化</span>import pycuda<span class="token punctuation">.</span>autoinit<span class="token preprocessor property"># SourceModule C++ 源码编译为python</span><span class="token keyword">from</span> pycuda<span class="token punctuation">.</span>compiler import SourceModulekernel_code <span class="token operator">=</span> r<span class="token string">""</span>"__global__ <span class="token keyword">void</span> <span class="token function">hello_from_gpu</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d,%d] Hello World from the GPU!\n,threadIdx.x,blockIdx.x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>__global__ <span class="token keyword">void</span> <span class="token function">hello_from_gpu_2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[%d,%d] Hello World from the GPU! the second func\n"</span><span class="token punctuation">,</span>threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">,</span> blockIdx<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token string">""</span>"<span class="token preprocessor property"># 编译</span>mod <span class="token operator">=</span> <span class="token function">SourceModule</span><span class="token punctuation">(</span>kernel_code<span class="token punctuation">)</span><span class="token preprocessor property"># 获取函数</span>hello_from_gpu <span class="token operator">=</span> mod<span class="token punctuation">.</span><span class="token function">get_function</span><span class="token punctuation">(</span><span class="token string">"hello_from_gpu_2"</span><span class="token punctuation">)</span><span class="token preprocessor property"># 利用多线程来调用我们定义的函数</span><span class="token function">hello_from_gpu</span><span class="token punctuation">(</span>block<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token preprocessor property"># 核函数的执行次数就是里面的数字的乘积</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token preprocessor property"># 实现加法并行计算</span>import pycuda<span class="token punctuation">.</span>autoinit<span class="token keyword">from</span> pycuda<span class="token punctuation">.</span>compiler import SourceModuleimport pycuda<span class="token punctuation">.</span>gpuarray <span class="token keyword">as</span> gpuarrayimport numpy <span class="token keyword">as</span> np<span class="token preprocessor property"># 使用核函数</span><span class="token preprocessor property"># threadIdx:计算线程</span><span class="token preprocessor property"># 第n号线程将x[n]与y[n]相加后存入z[n]</span>mod <span class="token operator">=</span> <span class="token function">SourceModule</span><span class="token punctuation">(</span>r<span class="token string">""</span>"<span class="token keyword">void</span> __global__ <span class="token keyword">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span>blockIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    z<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> y<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> __global__ <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">float</span> <span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token keyword">float</span> <span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> blockDim<span class="token punctuation">.</span>x <span class="token operator">*</span> blockIdx<span class="token punctuation">.</span>x <span class="token operator">+</span> threadIdx<span class="token punctuation">.</span>x<span class="token punctuation">;</span>    z<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">*</span>y<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token string">""</span>"<span class="token punctuation">)</span><span class="token keyword">add</span> <span class="token operator">=</span> mod<span class="token punctuation">.</span><span class="token function">get_function</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span>mul <span class="token operator">=</span> mod<span class="token punctuation">.</span><span class="token function">get_functon</span><span class="token punctuation">(</span><span class="token string">"mul"</span><span class="token punctuation">)</span>num  <span class="token operator">=</span> <span class="token number">8</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token punctuation">)</span>B <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span>num<span class="token punctuation">)</span>C <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">[</span>num<span class="token punctuation">,</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>A_GPU <span class="token operator">=</span> gpuarray<span class="token punctuation">.</span><span class="token function">to_gpu</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">astype</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>B_GPU <span class="token operator">=</span> gpuarray<span class="token punctuation">.</span><span class="token function">to_gpu</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">astype</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>C_GPU <span class="token operator">=</span> gpuarray<span class="token punctuation">.</span><span class="token function">to_gpu</span><span class="token punctuation">(</span>B<span class="token punctuation">.</span><span class="token function">astype</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">add</span><span class="token punctuation">(</span>A_GPU<span class="token punctuation">,</span> B_GPU<span class="token punctuation">,</span>C_GPU<span class="token punctuation">,</span>grid<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span>block<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity串口通信全流程</title>
      <link href="/2021/01/22/unity-chuan-kou-tong-xin-quan-liu-cheng/"/>
      <url>/2021/01/22/unity-chuan-kou-tong-xin-quan-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ol><li>虚拟串口调试工具 Virtual Serial Port Driver 6.9<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021012216584618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="虚拟串口工具"></li><li>串口调试工具 sscom5.13.1<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2021012217000719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="串口调试工具"></li><li>如果串口的数据包是字符串类型的，可以直接使用串口调试工具去转换。如果是double类型的数据包，需要自己去转一下，这里贴一个简易的代码</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">double_convert_byte</span> <span class="token punctuation">:</span> MonoBehaviour <span class="token punctuation">{</span>    <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span> listData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Use this for initialization</span>    <span class="token keyword">void</span> <span class="token function">Start</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        message<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">;</span>        message<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">;</span>        message<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            listData<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>BitConverter<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> bytes <span class="token operator">=</span> listData<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> hex <span class="token operator">=</span> BitConverter<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">.</span>Empty<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ToLower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Update is called once per frame</span>    <span class="token keyword">void</span> <span class="token function">Update</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="串口读取及其解包"><a href="#串口读取及其解包" class="headerlink" title="串口读取及其解包"></a>串口读取及其解包</h1><p>1.串口读取代码</p><pre class="line-numbers language-csharp"><code class="language-csharp"> <span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>IO<span class="token punctuation">.</span>Ports<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">;</span><span class="token keyword">namespace</span> data_structure<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PortControl</span> <span class="token punctuation">:</span> MonoBehaviour    <span class="token punctuation">{</span>        <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"串口名"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token keyword">string</span> portName <span class="token operator">=</span> <span class="token string">"COM2"</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"波特率"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token keyword">int</span> baudRate <span class="token operator">=</span> <span class="token number">115200</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"效验位"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">public</span> Parity parity <span class="token operator">=</span> Parity<span class="token punctuation">.</span>None<span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"数据位"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">public</span> <span class="token keyword">int</span> dataBits <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">[</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"停止位"</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">public</span> StopBits stopBits <span class="token operator">=</span> StopBits<span class="token punctuation">.</span>One<span class="token punctuation">;</span>        <span class="token keyword">private</span> SerialPort sp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Thread dataReceiveThread<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> datasBytes<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span> OneByte<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> OtherBytes<span class="token punctuation">;</span>        ArrayList m_CmdRcv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//存放接收到的数据</span>        <span class="token comment" spellcheck="true">//接收当前状态量数据</span>        <span class="token keyword">public</span> Object_State_Struct data_state <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object_State_Struct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cmdsize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> firstHeader <span class="token operator">=</span> <span class="token number">0x4A</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据包帧头</span>        <span class="token keyword">byte</span> secondHeader <span class="token operator">=</span> <span class="token number">0x58</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">OpenPortControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 开启串口</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">OpenPortControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerialPort</span><span class="token punctuation">(</span>portName<span class="token punctuation">,</span> baudRate<span class="token punctuation">,</span> parity<span class="token punctuation">,</span> dataBits<span class="token punctuation">,</span> stopBits<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//串口初始化</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sp<span class="token punctuation">.</span>IsOpen<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sp<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dataReceiveThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ReceiveData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//该线程用于接收串口数据 </span>            dataReceiveThread<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 关闭串口</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ClosePortControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sp<span class="token punctuation">.</span>IsOpen<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sp<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭串口</span>                sp<span class="token punctuation">.</span><span class="token function">Dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将串口从内存中释放掉</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ReceiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> bytesToRead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sp <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> sp<span class="token punctuation">.</span>IsOpen<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        datasBytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        bytesToRead <span class="token operator">=</span> sp<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>datasBytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> datasBytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将串口中的数据插入到datasBytes中的第0位</span>                        <span class="token comment" spellcheck="true">//Debug.Log(bytesToRead);</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesToRead <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">continue</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            i<span class="token operator">++</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                OneByte <span class="token operator">=</span> datasBytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                List<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span> listData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                listData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>OneByte<span class="token punctuation">)</span><span class="token punctuation">;</span>                                listData<span class="token punctuation">.</span><span class="token function">AddRange</span><span class="token punctuation">(</span>datasBytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将串口数据组合成完整的包</span>                                OtherBytes <span class="token operator">=</span> listData<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                <span class="token function">Decode_data</span><span class="token punctuation">(</span>OtherBytes<span class="token punctuation">,</span> OtherBytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//解包程序</span>                                Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>OtherBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">//Debug.Log(strbytes);</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>Message<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                Thread<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 数据解包</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Decode_data</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> receiveData<span class="token punctuation">,</span> <span class="token keyword">int</span> recvLength<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">addRange</span><span class="token punctuation">(</span>receiveData<span class="token punctuation">,</span> recvLength<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把接收到的数据暂存为m_CmdRcv</span>            <span class="token keyword">int</span> fPz <span class="token operator">=</span> m_CmdRcv<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>firstHeader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查找消息头0x4A的位置；fPz=0,第一位；fPz>0,非第一位</span>            <span class="token keyword">bool</span> flagofFramTip <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数据帧头查找标志位，初始化为false</span>            cmdsize <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">SizeOf</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Object_State_Struct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flagofFramTip<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fPz <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> m_CmdRcv<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> flagofFramTip <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fPz <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> m_CmdRcv<span class="token punctuation">.</span><span class="token function">RemoveRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fPz<span class="token punctuation">)</span><span class="token punctuation">;</span> fPz <span class="token operator">=</span> m_CmdRcv<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>firstHeader<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>fPz <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>m_CmdRcv<span class="token punctuation">.</span>Count <span class="token operator">>=</span> cmdsize<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>secondHeader <span class="token operator">==</span> <span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>m_CmdRcv<span class="token punctuation">[</span>fPz <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//计算校验和</span>                            IntPtr pCmdRcv <span class="token operator">=</span> Marshal<span class="token punctuation">.</span><span class="token function">AllocHGlobal</span><span class="token punctuation">(</span>cmdsize<span class="token punctuation">)</span><span class="token punctuation">;</span>                            Byte check <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                            ArrayList cmdData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cmdsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                check <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>m_CmdRcv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                                cmdData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>m_CmdRcv<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">//判断校验和</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>check <span class="token operator">==</span> <span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>m_CmdRcv<span class="token punctuation">[</span>cmdsize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// 认为此包正确</span>                                cmdData<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">//将cmdData的数据拷贝到pCmdRcv,方便后续的结构体直接赋值</span>                                Marshal<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cmdData<span class="token punctuation">.</span><span class="token function">ToArray</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Byte<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pCmdRcv<span class="token punctuation">,</span> cmdsize<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>m_CmdRcv<span class="token punctuation">[</span>fPz <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                <span class="token punctuation">{</span>                                    <span class="token keyword">case</span> <span class="token number">0x41</span><span class="token punctuation">:</span>                                        <span class="token punctuation">{</span>                                            data_state <span class="token operator">=</span> <span class="token punctuation">(</span>Object_State_Struct<span class="token punctuation">)</span>Marshal<span class="token punctuation">.</span><span class="token function">PtrToStructure</span><span class="token punctuation">(</span>pCmdRcv<span class="token punctuation">,</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>Object_State_Struct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token punctuation">}</span>                                        <span class="token keyword">break</span><span class="token punctuation">;</span>                                    <span class="token keyword">default</span><span class="token punctuation">:</span>                                        <span class="token keyword">break</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                                <span class="token comment" spellcheck="true">//移除检验完的帧长</span>                                m_CmdRcv<span class="token punctuation">.</span><span class="token function">RemoveRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> cmdsize<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">//校验和不匹配</span>                            <span class="token keyword">else</span>                            <span class="token punctuation">{</span>                                m_CmdRcv<span class="token punctuation">.</span><span class="token function">RemoveRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//第二位识别帧不匹配</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            m_CmdRcv<span class="token punctuation">.</span><span class="token function">RemoveRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//识别帧小于识别帧长</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        flagofFramTip <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//帧头小于识别帧长</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> flagofFramTip <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 重新寻找帧头</span>                fPz <span class="token operator">=</span> m_CmdRcv<span class="token punctuation">.</span><span class="token function">IndexOf</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Byte<span class="token punctuation">)</span>firstHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// Byte数组转换为ArrayList</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="receiveData">字符数组&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="len">数组长度&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;returns>&lt;/returns></span>        <span class="token keyword">void</span> <span class="token function">addRange</span><span class="token punctuation">(</span>Byte<span class="token punctuation">[</span><span class="token punctuation">]</span> receiveData<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                m_CmdRcv<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>receiveData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">OnApplicationQuit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">ClosePortControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结构体格式（应与协议一致）"><a href="#结构体格式（应与协议一致）" class="headerlink" title="结构体格式（应与协议一致）"></a>结构体格式（应与协议一致）</h1><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>InteropServices<span class="token punctuation">;</span><span class="token keyword">namespace</span> data_structure<span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token function">StructLayout</span><span class="token punctuation">(</span>LayoutKind<span class="token punctuation">.</span>Sequential<span class="token punctuation">,</span> Pack <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">public</span> <span class="token keyword">struct</span> Object_State_Struct    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 0.同步字节1</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">byte</span> header1<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 1.同步字节2</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">byte</span> header2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 2.帧长（包含校验位）</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">byte</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 3.识别帧</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">byte</span> ID<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">double</span> posX<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// 140.校验和</span>        <span class="token comment" spellcheck="true">/// 0~139字节累加和</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token keyword">public</span> <span class="token keyword">byte</span> checksum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 串口通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用unity制作自己的目标检测数据集</title>
      <link href="/2020/12/19/li-yong-unity-zhi-zuo-zi-ji-de-mu-biao-jian-ce-shu-ju-ji/"/>
      <url>/2020/12/19/li-yong-unity-zhi-zuo-zi-ji-de-mu-biao-jian-ce-shu-ju-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建场景"><a href="#搭建场景" class="headerlink" title="搭建场景"></a>搭建场景</h1><ol><li>首先搭建需要进行训练的目标场景</li><li>对需要进行标注的三维模型设置标签，这里是为了便于射线去检测目标物体进而生成mask。<h1 id="利用射线检测目标模型碰撞"><a href="#利用射线检测目标模型碰撞" class="headerlink" title="利用射线检测目标模型碰撞"></a>利用射线检测目标模型碰撞</h1></li><li>这里直接放代码</li></ol><pre class="line-numbers language-csharp"><code class="language-csharp">    Ray ray<span class="token punctuation">;</span>    RaycastHit hitInfo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">savethepng</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Texture2D tex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Texture2D</span><span class="token punctuation">(</span><span class="token number">720</span><span class="token punctuation">,</span> <span class="token number">540</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化mask的大小，一般与当前game视图的大小一致</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">720</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">720</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">540</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">540</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ray <span class="token operator">=</span> cam<span class="token punctuation">.</span><span class="token function">ScreenPointToRay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对相机照射到的视图中进行射线碰撞检测</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Physics<span class="token punctuation">.</span><span class="token function">Raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">,</span> <span class="token keyword">out</span> hitInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hitInfo<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>tag <span class="token operator">==</span> <span class="token string">"target"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置待检测的目标</span>                    <span class="token punctuation">{</span>                        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>#检测到即设为<span class="token number">1</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">720</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    tex<span class="token punctuation">.</span><span class="token function">SetPixel</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对mask进行涂色</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    tex<span class="token punctuation">.</span><span class="token function">SetPixel</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> databytes <span class="token operator">=</span> tex<span class="token punctuation">.</span><span class="token function">EncodeToPNG</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fs <span class="token operator">=</span> File<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"保存路径"</span> <span class="token operator">+</span> id<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span><span class="token punctuation">,</span> FileMode<span class="token punctuation">.</span>OpenOrCreate<span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>databytes<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> databytes<span class="token punctuation">.</span>Length<span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201219184859967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="生成的mask图片"></p><h1 id="提取外接矩形并生成label信息"><a href="#提取外接矩形并生成label信息" class="headerlink" title="提取外接矩形并生成label信息"></a>提取外接矩形并生成label信息</h1><p>1.利用opencv提取mask的最小外接矩形，并将其外接矩形的左上角点坐标及矩形的长和宽进行输出。</p><pre class="line-numbers language-csharp"><code class="language-csharp">import cv2import osimport numpy <span class="token keyword">as</span> nplabel_path <span class="token operator">=</span> <span class="token string">"./img/"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">listdir</span><span class="token punctuation">(</span>label_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    label_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span>label_path<span class="token operator">+</span><span class="token string">"{}.png"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    contours<span class="token punctuation">,</span> _ <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">findContours</span><span class="token punctuation">(</span>label_img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>RETR_TREE<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> contours<span class="token punctuation">:</span>        rect_x<span class="token punctuation">,</span> rect_y<span class="token punctuation">,</span> rect_w<span class="token punctuation">,</span> rect_h <span class="token operator">=</span> cv2<span class="token punctuation">.</span><span class="token function">boundingRect</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span><span class="token function">rectangle</span><span class="token punctuation">(</span>label_img<span class="token punctuation">,</span> <span class="token punctuation">(</span>rect_x<span class="token punctuation">,</span> rect_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>rect_x <span class="token operator">+</span> rect_w<span class="token punctuation">,</span> rect_y <span class="token operator">+</span> rect_h<span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    with <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"./ground_truth.txt"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"{},{},{},{}\n"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>rect_x<span class="token punctuation">,</span>rect_y<span class="token punctuation">,</span>rect_w<span class="token punctuation">,</span>rect_h<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu系统配置git及github</title>
      <link href="/2020/11/23/ubuntu-xi-tong-pei-zhi-git-ji-github/"/>
      <url>/2020/11/23/ubuntu-xi-tong-pei-zhi-git-ji-github/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装配置git服务器"><a href="#1-安装配置git服务器" class="headerlink" title="1.安装配置git服务器"></a>1.安装配置git服务器</h1><ol><li>安装ssh: <code>sudo apt-get install openssh-server openssh-client</code></li><li>启动ssh服务器：<code>sudo /etc/init.d/ssh restart</code></li><li>安装git服务器：<code>sudo apt-get install git-core</code></li></ol><h1 id="配置ssh公钥"><a href="#配置ssh公钥" class="headerlink" title="配置ssh公钥"></a>配置ssh公钥</h1><ol><li>本地生成ssh公钥：<code>ssh-keygen -C '你的邮箱地址' -t rsa</code><br>注： 这条命令会在当前用户目录~/.ssh/ 下生成秘钥文件</li><li>测试畅通性：<code>ssh -v git@github.com</code></li><li>上传公钥到github:<br>依次点击Settings/SSH and GPG keys, 点击New SSH key,把~/.ssh/id_rsa.pub中的内容全部复制到Key编辑框中，点击上传。如下图<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123115136855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="zh"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123115231258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123115505327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>回复邮件：公钥上传后，github会往邮箱发送确认邮件，需要点击确认<h1 id="使用github管理项目"><a href="#使用github管理项目" class="headerlink" title="使用github管理项目"></a>使用github管理项目</h1></li><li>在公共的github中创建一个新的仓库<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020112312035656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123120431984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123120527337.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li><li>创建协作者<br>把自己的github与实验室的github进行协作即可<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123120630224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123120656648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123120727808.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></li></ol><h1 id="仓库初始化：进入需要版本控制的项目目录（本机需要上传的目录）"><a href="#仓库初始化：进入需要版本控制的项目目录（本机需要上传的目录）" class="headerlink" title="仓库初始化：进入需要版本控制的项目目录（本机需要上传的目录）"></a>仓库初始化：进入需要版本控制的项目目录（本机需要上传的目录）</h1><ol><li>输入命令： <code>git init</code><br>注： 运行完后，会发现目录多了一个.git文件夹</li><li>配置git:<br>输入命令：<code>git config --global user.name "你的github用户名"</code><br>输入命令：<code>git config --global user.email 你的github邮箱地址</code></li><li>添加托管文件：<br>输入命令：<code>git add ./</code><br>注：这是添加目录下所有文件，如果只是添加某个文件，就将文件名字列出，如果添加目录，则可以用*代替。</li><li>commit项目：<br>输入命令：git commit -m “描述信息”<br>注：-m 参数后面跟着本次提交的描述信息，可以是修改了哪些代码，新增的功能</li><li>上传项目：<br>输入命令：<code>git remote add origin 仓库地址</code> 第一次需要<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20201123122235353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>输入命令：<code>git push -u origin master</code><br>输入命令：<code>git pull</code><br>输入命令：<code>git push</code><br>注：“git remote add origin 仓库地址”：这个命令只用输一次，以后就不用再输入了，直接git add，git commit，git pull，git push</li></ol><h1 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h1><ol><li><code>git clone 仓库地址</code> // 克隆仓库代码到本地</li><li><code>git diff</code> //查看本地代码属于仓库的哪个分支</li><li><code>git pull</code> //从远程拿到最新的版本代码（一定在提交前保证自己本地代码是最新的）</li><li><code>git brach</code> // 查看本地代码属于仓库的哪个分支</li><li><code>git brach -a</code> //查看仓库都有哪些分支</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode连接docker远程调试</title>
      <link href="/2020/09/11/vscode-lian-jie-docker-yuan-cheng-diao-shi/"/>
      <url>/2020/09/11/vscode-lian-jie-docker-yuan-cheng-diao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode连接docker远程调试"><a href="#vscode连接docker远程调试" class="headerlink" title="vscode连接docker远程调试"></a>vscode连接docker远程调试</h1><p>太坑了吧，大致先说一下，先用remote-ssh连接远程服务器，在命令行中启动docker，在docker容器中配置ssh连接，启动ssh连接。在vscode再用remote-ssh连接docker进行远程调试。</p><h2 id="remote-ssh"><a href="#remote-ssh" class="headerlink" title="remote-ssh"></a>remote-ssh</h2><ol><li>ctrl+shift+p 打开配置文件</li></ol><pre><code>Host ljx    HostName xxx    User ubuntu    Port 22Host docker    HostName xxxx    User root    Port xxx</code></pre><h2 id="docker容器中配置ssh"><a href="#docker容器中配置ssh" class="headerlink" title="docker容器中配置ssh"></a>docker容器中配置ssh</h2><blockquote><p><a href="https://blog.csdn.net/hanchaobiao/article/details/84069299" target="_blank" rel="noopener">https://blog.csdn.net/hanchaobiao/article/details/84069299</a></p></blockquote><pre><code>docker run -it -p xxx:8022:22 --name="name" 08e1d56d916b /bin/bash</code></pre><p>以远程的方式启动docker的远程容器</p><h2 id="remote-ssh连接docker"><a href="#remote-ssh连接docker" class="headerlink" title="remote-ssh连接docker"></a>remote-ssh连接docker</h2><p>和连接普通服务器一样，配置一下就行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题与bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python创建xml并完成基本的操作</title>
      <link href="/2020/07/31/python-chuang-jian-xml-bing-wan-cheng-ji-ben-de-cao-zuo/"/>
      <url>/2020/07/31/python-chuang-jian-xml-bing-wan-cheng-ji-ben-de-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="创建XML文件"><a href="#创建XML文件" class="headerlink" title="创建XML文件"></a>创建XML文件</h1><p>首先导入库文件</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> xml<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>minidom <span class="token keyword">as</span> minidom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了创建如下所示的xml文件我们编写如下代码</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>annotation</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filename</span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filename</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>origin</span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>origin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>research</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>provider</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>provider</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">></span></span>D<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginname</span><span class="token punctuation">></span></span>E<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginname</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginclass</span><span class="token punctuation">></span></span>F<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginclass</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span><span class="token punctuation">></span></span>G<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>research</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>segmentation</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultfile</span><span class="token punctuation">></span></span>H<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>segmentation</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>annotation</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">write_xml</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        dom <span class="token operator">=</span> minidom<span class="token punctuation">.</span>getDOMImplementation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>createDocument<span class="token punctuation">(</span>None<span class="token punctuation">,</span> <span class="token string">'annotation'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        root <span class="token operator">=</span> dom<span class="token punctuation">.</span>documentElement        element_source <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'source'</span><span class="token punctuation">)</span>        element_filename <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">)</span>        element_filename<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'{}.tif'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_source<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_filename<span class="token punctuation">)</span>        element_origin <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'origin'</span><span class="token punctuation">)</span>        element_origin<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'GF2/GF3'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_source<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_origin<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_source<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">## /source</span>        <span class="token comment" spellcheck="true">######### research</span>        element_research <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'research'</span><span class="token punctuation">)</span>        element_version <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'version'</span><span class="token punctuation">)</span>        element_version<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'4.0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_research<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_version<span class="token punctuation">)</span>        element_provider <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'provider'</span><span class="token punctuation">)</span>        element_provider<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'北京理工大学宇航学院系统仿真实验室'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_research<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_provider<span class="token punctuation">)</span>        element_author <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'author'</span><span class="token punctuation">)</span>        element_author<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'天空之城'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_research<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_author<span class="token punctuation">)</span>        element_pluginname <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'pluginname'</span><span class="token punctuation">)</span>        element_pluginname<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'高分辨率可见光图像精细化标注'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_research<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_pluginname<span class="token punctuation">)</span>        element_pluginclass <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'pluginclass'</span><span class="token punctuation">)</span>        element_pluginclass<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'标注'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_research<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_pluginclass<span class="token punctuation">)</span>        element_time <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'time'</span><span class="token punctuation">)</span>        element_time<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'2020-07-2020-11'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_research<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_time<span class="token punctuation">)</span>        element_segmentation <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'segmentation'</span><span class="token punctuation">)</span>        element_resultfile <span class="token operator">=</span> dom<span class="token punctuation">.</span>createElement<span class="token punctuation">(</span><span class="token string">'resultfile'</span><span class="token punctuation">)</span>        element_resultfile<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>dom<span class="token punctuation">.</span>createTextNode<span class="token punctuation">(</span><span class="token string">'{}_gt.png'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        element_segmentation<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_resultfile<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_source<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">## /source</span>        root<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_research<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>appendChild<span class="token punctuation">(</span>element_segmentation<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 保存文件</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'./result/{}.xml'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            dom<span class="token punctuation">.</span>writexml<span class="token punctuation">(</span>f<span class="token punctuation">,</span> addindent<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> newl<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>创建一个以“”annotation”为根节点的xml文件</li></ol><pre class="line-numbers language-xml"><code class="language-xml"> dom = minidom.getDOMImplementation().createDocument(None, 'annotation', None) root = dom.documentElement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>创建根节点下的子节点</li></ol><pre class="line-numbers language-xml"><code class="language-xml"> element_source = dom.createElement('source') element_filename = dom.createElement('filename') element_filename.appendChild(dom.createTextNode('{}.tif'.format(num))) element_source.appendChild(element_filename) root.appendChild(element_source)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语义分割 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语义分割 </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语义分割比赛tricks</title>
      <link href="/2020/07/24/yu-yi-fen-ge-bi-sai-tricks/"/>
      <url>/2020/07/24/yu-yi-fen-ge-bi-sai-tricks/</url>
      
        <content type="html"><![CDATA[<h1 id="语义分割大全"><a href="#语义分割大全" class="headerlink" title="语义分割大全"></a>语义分割大全</h1><p><a href="https://github.com/Tramac/awesome-semantic-segmentation-pytorch" target="_blank" rel="noopener">https://github.com/Tramac/awesome-semantic-segmentation-pytorch</a><br>可带劲了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语义分割 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语义分割 </tag>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人体姿态数据集可视化heatmap，以coco数据集为例</title>
      <link href="/2020/06/26/ren-ti-zi-tai-shu-ju-ji-ke-shi-hua-heatmap-yi-coco-shu-ju-ji-wei-li/"/>
      <url>/2020/06/26/ren-ti-zi-tai-shu-ju-ji-ke-shi-hua-heatmap-yi-coco-shu-ju-ji-wei-li/</url>
      
        <content type="html"><![CDATA[<p>该代码对于一张图进行heatmap图片的可视化，会存储coco的17组关节点图片，即每一个heatmap包含图片中所有人体的同一关节点位置。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">##生成heatmap</span><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> json<span class="token keyword">import</span> cv2<span class="token keyword">from</span> itertools <span class="token keyword">import</span> groupby<span class="token keyword">import</span> random<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltdataset_dir <span class="token operator">=</span> <span class="token string">"D:/send_paper/COCO val2017/val2017/"</span>dataset_save <span class="token operator">=</span> <span class="token string">"D:/send_paper/COCO val2017/result/"</span><span class="token keyword">def</span> <span class="token function">normalization</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    _range <span class="token operator">=</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>data<span class="token operator">-</span>np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>_range<span class="token operator">*</span><span class="token number">255</span><span class="token keyword">def</span> <span class="token function">CenterLabelHeatMap</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>kpts<span class="token punctuation">,</span>sigma<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_height<span class="token punctuation">,</span>img_width <span class="token punctuation">,</span>_ <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    <span class="token comment" spellcheck="true"># img = cv2.applyColorMap(img,3)</span>    X1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>img_width<span class="token punctuation">,</span>img_width<span class="token punctuation">)</span>    Y1 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>img_height<span class="token punctuation">,</span>img_height<span class="token punctuation">)</span>    heatmap<span class="token operator">=</span>list<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>kpts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">)</span>        X <span class="token operator">=</span> X<span class="token operator">-</span>kpts<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        Y <span class="token operator">=</span> Y<span class="token operator">-</span>kpts<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        D2 <span class="token operator">=</span> X<span class="token operator">*</span>X<span class="token operator">+</span>Y<span class="token operator">*</span>Y        E2 <span class="token operator">=</span> <span class="token number">2.0</span><span class="token operator">*</span>sigma<span class="token operator">*</span>sigma        Exponent <span class="token operator">=</span> D2<span class="token operator">/</span>E2        heatmap_1  <span class="token operator">=</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>Exponent<span class="token punctuation">)</span>        heatmap_1 <span class="token operator">=</span> normalization<span class="token punctuation">(</span>heatmap_1<span class="token punctuation">)</span>        heatmap_1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>heatmap_1<span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        heatmap<span class="token punctuation">.</span>append<span class="token punctuation">(</span>heatmap_1<span class="token punctuation">)</span>    <span class="token keyword">for</span> hm <span class="token keyword">in</span> heatmap<span class="token punctuation">:</span>        result<span class="token operator">+=</span>hm    heatmap <span class="token operator">=</span> cv2<span class="token punctuation">.</span>applyColorMap<span class="token punctuation">(</span>result<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLORMAP_JET<span class="token punctuation">)</span>    img <span class="token operator">=</span> img<span class="token operator">*</span><span class="token number">0.3</span><span class="token operator">+</span>heatmap<span class="token operator">*</span><span class="token number">0.7</span>    <span class="token keyword">return</span> img<span class="token punctuation">,</span>heatmap<span class="token keyword">def</span> <span class="token function">CenterGaussianHeatMap</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>c_x<span class="token punctuation">,</span>c_y<span class="token punctuation">,</span>variance<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_height<span class="token punctuation">,</span> img_width<span class="token punctuation">,</span> _ <span class="token operator">=</span> img<span class="token punctuation">.</span>shape    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>applyColorMap<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    gaussian_map <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>img_height<span class="token punctuation">,</span>img_width<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x_p <span class="token keyword">in</span> range<span class="token punctuation">(</span>img_width<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y_p <span class="token keyword">in</span> range<span class="token punctuation">(</span>img_height<span class="token punctuation">)</span><span class="token punctuation">:</span>            dist_sq <span class="token operator">=</span> <span class="token punctuation">(</span>x_p<span class="token operator">-</span>c_x<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x_p<span class="token operator">-</span>c_x<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y_p<span class="token operator">-</span>c_y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>y_p<span class="token operator">-</span>c_y<span class="token punctuation">)</span>            exponent <span class="token operator">=</span> dist_sq<span class="token operator">/</span><span class="token number">2.0</span><span class="token operator">/</span>variance<span class="token operator">/</span>variance            gaussian_map<span class="token punctuation">[</span>y_p<span class="token punctuation">,</span>x_p<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>exponent<span class="token punctuation">)</span>    gaussian_map <span class="token operator">=</span> normalization<span class="token punctuation">(</span>gaussian_map<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># img[:,:,0]=img[:,:,0]*0.1+gaussian_map[:,:,0]*0.9</span>    <span class="token keyword">return</span> img<span class="token triple-quoted-string string">"""先用groupby将同一个key下的不同人体相同关节点位置取出来"""</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"D:/send_paper/keypoints_val2017_results_0.json"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> load_f<span class="token punctuation">:</span>    load_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>load_f<span class="token punctuation">)</span>ret <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>ret_num <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> group_num<span class="token punctuation">,</span>group <span class="token keyword">in</span> groupby<span class="token punctuation">(</span>load_dict<span class="token punctuation">,</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"image_id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span>    ret_num<span class="token punctuation">.</span>append<span class="token punctuation">(</span>group_num<span class="token punctuation">)</span>ret_result <span class="token operator">=</span> zip<span class="token punctuation">(</span>ret_num<span class="token punctuation">,</span>ret<span class="token punctuation">)</span>imgIds_old <span class="token operator">=</span> <span class="token number">0</span>image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">397133</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> dict_num <span class="token keyword">in</span> ret_result<span class="token punctuation">:</span>    imgIds <span class="token operator">=</span> dict_num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> imgIds<span class="token operator">==</span><span class="token number">127263</span> <span class="token punctuation">:</span>        image_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">,</span> str<span class="token punctuation">(</span>imgIds<span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>        <span class="token keyword">for</span> kpts_num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            joints <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> person_num <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dict_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                person_mess <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>dict_num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>person_num<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'keypoints'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>                joints<span class="token punctuation">.</span>append<span class="token punctuation">(</span>person_mess<span class="token punctuation">[</span>kpts_num<span class="token punctuation">]</span><span class="token punctuation">)</span>            img<span class="token punctuation">,</span>heatmap<span class="token operator">=</span>CenterLabelHeatMap<span class="token punctuation">(</span>image<span class="token punctuation">,</span>joints<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"D:/send_paper/{}.jpg"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>kpts_num<span class="token punctuation">)</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200626095144406.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200626095157305.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人体姿态识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人体姿态识别 </tag>
            
            <tag> 数据集可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows api 实现对指定窗口名称进行截图保存</title>
      <link href="/2020/05/24/windows-api-shi-xian-dui-zhi-ding-chuang-kou-ming-cheng-jin-xing-jie-tu-bao-cun/"/>
      <url>/2020/05/24/windows-api-shi-xian-dui-zhi-ding-chuang-kou-ming-cheng-jin-xing-jie-tu-bao-cun/</url>
      
        <content type="html"><![CDATA[<p>有几个问题</p><ol><li>第一是有些窗口的截图是黑色的</li><li>第二是截出来的窗口的显示大小有些问题</li><li>第三是只能截出现在桌面的窗口（包括被挡住的窗口），但是不包括最小化的窗口<br>如果有大佬知道怎么做，一定要教教我啊，谢谢！</li></ol><pre class="line-numbers language-c++"><code class="language-c++">#include "stdio.h"#include "windows.h"/************************************************************************//* hBitmap    为刚才的屏幕位图句柄/* lpFileName 为需要保存的位图文件名/************************************************************************/int SaveBitmapToFile(HBITMAP hBitmap, LPSTR lpFileName){    HDC            hDC; //设备描述表    int            iBits;//当前显示分辨率下每个像素所占字节数    WORD           wBitCount;//位图中每个像素所占字节数        DWORD          dwPaletteSize = 0;//定义调色板大小    DWORD          dwBmBitsSize;//位图中像素字节大小    DWORD          dwDIBSize;// 位图文件大小    DWORD          dwWritten;//写入文件字节数    BITMAP         Bitmap;//位图结构    BITMAPFILEHEADER   bmfHdr;   //位图属性结构       BITMAPINFOHEADER   bi;       //位图文件头结构    LPBITMAPINFOHEADER lpbi;     //位图信息头结构     指向位图信息头结构    HANDLE          fh;//定义文件句柄    HANDLE            hDib;//分配内存句柄    HANDLE            hPal;//分配内存句柄    HANDLE          hOldPal = NULL;//调色板句柄      //计算位图文件每个像素所占字节数       hDC = CreateDC("DISPLAY", NULL, NULL, NULL);    iBits = GetDeviceCaps(hDC, BITSPIXEL) * GetDeviceCaps(hDC, PLANES);    DeleteDC(hDC);    if (iBits <= 1)        wBitCount = 1;    else if (iBits <= 4)        wBitCount = 4;    else if (iBits <= 8)        wBitCount = 8;    else if (iBits <= 24)        wBitCount = 24;    else if (iBits <= 32)        wBitCount = 24;    //计算调色板大小       if (wBitCount <= 8)        dwPaletteSize = (1 << wBitCount) *sizeof(RGBQUAD);    //设置位图信息头结构       GetObject(hBitmap, sizeof(BITMAP), (LPSTR)&Bitmap);    bi.biSize = sizeof(BITMAPINFOHEADER);    bi.biWidth = Bitmap.bmWidth;    bi.biHeight = Bitmap.bmHeight;    bi.biPlanes = 1;    bi.biBitCount = wBitCount;    bi.biCompression = BI_RGB;    bi.biSizeImage = 0;    bi.biXPelsPerMeter = 0;    bi.biYPelsPerMeter = 0;    bi.biClrUsed = 0;    bi.biClrImportant = 0;    dwBmBitsSize = ((Bitmap.bmWidth *wBitCount + 31) / 32) * 4 * Bitmap.bmHeight;    //为位图内容分配内存       hDib = GlobalAlloc(GHND, dwBmBitsSize + dwPaletteSize + sizeof(BITMAPINFOHEADER));    lpbi = (LPBITMAPINFOHEADER)GlobalLock(hDib);    if (lpbi == NULL)    {        return 0;    }    *lpbi = bi;    // 处理调色板    hPal = GetStockObject(DEFAULT_PALETTE);    if (hPal)    {        hDC = GetDC(NULL);        hOldPal = ::SelectPalette(hDC, (HPALETTE)hPal, FALSE);        RealizePalette(hDC);    }    // 获取该调色板下新的像素值       GetDIBits(hDC, hBitmap, 0, (UINT)Bitmap.bmHeight,        (LPSTR)lpbi + sizeof(BITMAPINFOHEADER) + dwPaletteSize,        (LPBITMAPINFO)lpbi, DIB_RGB_COLORS);    //恢复调色板          if (hOldPal)    {        SelectPalette(hDC, (HPALETTE)hOldPal, TRUE);        RealizePalette(hDC);        ReleaseDC(NULL, hDC);    }    //创建位图文件           fh = CreateFile(lpFileName, GENERIC_WRITE,        0, NULL, CREATE_ALWAYS,        FILE_ATTRIBUTE_NORMAL | FILE_FLAG_SEQUENTIAL_SCAN, NULL);    if (fh == INVALID_HANDLE_VALUE)        return FALSE;    // 设置位图文件头       bmfHdr.bfType = 0x4D42;  // "BM"       dwDIBSize = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + dwPaletteSize + dwBmBitsSize;    bmfHdr.bfSize = dwDIBSize;    bmfHdr.bfReserved1 = 0;    bmfHdr.bfReserved2 = 0;    bmfHdr.bfOffBits = (DWORD)sizeof(BITMAPFILEHEADER) + (DWORD)sizeof(BITMAPINFOHEADER) + dwPaletteSize;    // 写入位图文件头       WriteFile(fh, (LPSTR)&bmfHdr, sizeof(BITMAPFILEHEADER), &dwWritten, NULL);    // 写入位图文件其余内容       WriteFile(fh, (LPSTR)lpbi, dwDIBSize, &dwWritten, NULL);    //清除          GlobalUnlock(hDib);    GlobalFree(hDib);    CloseHandle(fh);    return 1;}HBITMAP   GetCaptureBmp(){    HDC     hDC;    HDC     MemDC;    BYTE*   Data;    HBITMAP   hBmp;    BITMAPINFO   bi;    HWND hq = FindWindow(NULL, "网易云音乐");    hDC = GetWindowDC(hq);    RECT rect;    GetWindowRect(hq, &rect);    int w = rect.right - rect.left, h = rect.bottom - rect.top;    memset(&bi, 0, sizeof(bi));    bi.bmiHeader.biSize = sizeof(BITMAPINFO);    bi.bmiHeader.biWidth = w*1.235;    bi.bmiHeader.biHeight = h*1.225;    bi.bmiHeader.biPlanes = 1;    bi.bmiHeader.biBitCount = 24;    MemDC = CreateCompatibleDC(hDC);    hBmp = CreateDIBSection(MemDC, &bi, DIB_RGB_COLORS, (void**)&Data, NULL, 0);    SelectObject(MemDC, hBmp);    BitBlt(MemDC, 1, 1, w*GetSystemMetrics(SM_CXSCREEN) / GetDeviceCaps(hDC, HORZSIZE), h*GetSystemMetrics(SM_CYSCREEN) / GetDeviceCaps(hDC, VERTSIZE), hDC, 9, 9, SRCCOPY);    ReleaseDC(NULL, hDC);    DeleteDC(MemDC);    return   hBmp;}void main(){    HBITMAP   hBmp;    hBmp = GetCaptureBmp();    SaveBitmapToFile(hBmp, "D:\\11.bmp");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题与bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>都0202年了，那些经典的目标检测算法你还会看吗？</title>
      <link href="/2020/05/24/du-0202-nian-liao-na-xie-jing-dian-de-mu-biao-jian-ce-suan-fa-ni-huan-hui-kan-ma/"/>
      <url>/2020/05/24/du-0202-nian-liao-na-xie-jing-dian-de-mu-biao-jian-ce-suan-fa-ni-huan-hui-kan-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h1><h2 id="一、网络结构"><a href="#一、网络结构" class="headerlink" title="一、网络结构"></a>一、网络结构</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200414180923542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="faster rcnn网络结构"><br>        Faster-RCNN可以采用多种的主干特征提取网络，常用的有VGG16，Resnet,Xception等等，本文采用的是VGG16的网络。<br>首先大概介绍一下VGG网络提出使用3个3x3卷积核代替7x7卷积核，使用2个3x3卷积来代替5*5卷积核，这样做的主要目的是在保证具有相同感受野的条件下，提升了网络的深度，在一定程度上提升了网络效果。<br>        上图的faster-rcnn采用的是vgg16作为特征提取网络，将最后提取的特征层保留为Feature Map,作为经典的双阶段网络鼻祖，其网络将得到的feature map经过一次3x3的卷积进行第一次回归，来产生提议框；这一步也是双阶段网络为什么精度较高的原因，这一步可以较好的使得正样本和负样本框进行均衡。<br>        在得到提议框之后，再次利用之前提取到的Feature Map 进行Roi-pooling,这里得到相同尺寸的特征图，最后再接两个全连接进行分类和回归得到最终的检测框。</p><h2 id="二、-Backbone-vgg16"><a href="#二、-Backbone-vgg16" class="headerlink" title="二、 Backbone-vgg16"></a>二、 Backbone-vgg16</h2><pre><code>import torch.nn as nn__all__ = ["vgg11","vgg13","vgg16","vgg19"]config = {    'A':[64,'M',128,'M',256,256,'M',512,512,'M',512,512,'M'],    'B':[64,64,'M',128,128,'M',256,256,'M',512,512,'M',512,512,'M'],    'D':[64,64,'M',128,128,'M',256,256,256,'M',512,512,512,'M',512,512,512,'M'],    'E':[64,64,'M',128,128,'M',256,256,256,256,'M',512,512,512,'M',512,512,512,512,'M']}class VGG(nn.Module):    def __init__(self,config,num_classes,batch_norm=True):        super(VGG,self).__init__()        self.features = self.__make_layer(config,batch_norm)        self.classifer = nn.Linear(512,num_classes)    def forward(self,x):        x = self.features(x)        x = x.view(x.size(0),-1)        x = self.classifer(x)        return x    def __make_layer(self,config,batch_norm):        layers = list()        in_channels = 3        for v in config:            if isinstance(v,int):                conv = nn.Conv2d(in_channels,v,3,1,1)                if batch_norm:                    layers += [conv,nn.BatchNorm2d(v),nn.ReLU(inplace=True)]                else:                    layers += [conv,nn.ReLU(inplace=True)]                in_channels = v            else:                layers.append(nn.MaxPool2d(2))        return nn.Sequential(*layers)def vgg11(num_classes):    return VGG(config['A'],num_classes)def vgg13(num_classes):    return VGG(config['B'],num_classes)def vgg16(num_classes):    return VGG(config['D'],num_classes)def vgg19(num_classes):    return VGG(config['E'],num_classes)</code></pre><h2 id="三、RPN区域建议网络"><a href="#三、RPN区域建议网络" class="headerlink" title="三、RPN区域建议网络"></a>三、RPN区域建议网络</h2><pre><code>在Faster-RCNN中，先验框的数量是9，并且faster-rcnn对输入进来的图片尺寸也没有固定，但是一般会把输入进来的图片短边固定为600，如输入一张1200x1800的图片，会把图片不失真的resize到600x900上。我们假设输入进来的图片大小为600x600x3，那么在经过vgg16特征提取后的特征图大小为38x38x1024。在38x38的特征图中，将其分为38x38的网格，每个网格对应9个先验框。也就是有38x38x9个先验框。其中1x1x36的卷积用于预测公共特征层每个先验框的偏移，包括中心点的位置(x,y)和先验框的长宽。1x1x18的卷积用来预测公共特征层每个先验框的类别，是背景还是物体。其中要注意的是，在预测宽和高的偏移时加入了指数函数进行预测，在后面计算解码时需要加上对数。</code></pre><h2 id="四、ROIPooling"><a href="#四、ROIPooling" class="headerlink" title="四、ROIPooling"></a>四、ROIPooling</h2><pre><code>对于传统的CNN，当网络训练好输入的图像尺寸必须是固定值，同时网络输出也是固定大小的vector or matrix.如果输入图像大小不定，这个问题就变得比较麻烦。有两种解决办法：1.从图像中crop一部分传入网路2.将图像warp成需要的大小后传入网络</code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200414192439828.jpg#pic_center" alt="crop和wrap效果"><br>可以看到无论采用何种方法，都会破坏原始图像的信息。<br>下面介绍一下roipooling的原理：<br>    通过RPN得到建议框后，我们将建议框对应在特征图中的尺度分为7x7份，每一块进行max pooling处理，这样经过处理后，即使不同的proposal,输出结构都是7x7大小。实现了固定输出。<br>    <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200414192259906.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="roipooling"></p><h1 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h1><h2 id="一、网络结构-1"><a href="#一、网络结构-1" class="headerlink" title="一、网络结构"></a>一、网络结构</h2><p>SSD是一种网络结构清晰明了的单阶段目标检测算法，其多尺度提取特征的方法为后面许多网络提供了借鉴意义。<strong>其主要思想是利用VGG特征提取网络，在不同的特征尺度图中设置先验框进行目标检测，可以提高小目标的检测率</strong><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020041419525230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="SSD网络结构"><br>1、输入一张图片后，先被resize到300x300的shape<br>2、 先经过两次3x3的卷积和一次2x2的最大池化，得到输出为(150,150,64)<br>3、经过两次3x3的卷积和一次2x2的最大池化，得到输出为(75,75,128)<br>4、经过三次3x3的卷积和一次2x2的最大池化，得到输出为(38,38,256)，在此特征图中每个网格点的先验框为4，一共有38x38x4个先验框<br>5、经过三次3x3的卷积和一次2x2的最大池化，得到输出为(19,19,512)<br>6、经过三次3x3的卷积和一次2x2的最大池化，得到输出为(19,19,512)<br>7、利用卷积代替全连接层，进行了两次3x3卷积网络，输出的特征层为1024，因此输出的net为(19,19,1024)，在此特征图中每个网格点的先验框为6，一共有19x19x6个先验框<br>8、经过一次1x1卷积，调整通道数，一次步长为2的3x3的卷积，输出的net为(10,10,512)，在此特征图中每个网格点的先验框为6，一共有10x10x6个先验框<br>9、经过一次1x1卷积，调整通道数，一次步长为2的3x3的卷积，输出的net为(5,5,256)，在此特征图中每个网格点的先验框为6，一共有5x5x6个先验框<br>10、经过一次1x1卷积，调整通道数，一次padding为valid的3x3卷积网络，输出特征层为256，因此输出为(3,3,256)。先验框个数为3x3x4个<br>11、经过一次1x1卷积，调整通道数，一次padding为valid的3x3卷积网络，输出特征层为256，因此输出为(1,1,256)。先验框个数为1x1x4个</p><h2 id="二、利用处理完的真实框与对应图片的预测结果计算loss"><a href="#二、利用处理完的真实框与对应图片的预测结果计算loss" class="headerlink" title="二、利用处理完的真实框与对应图片的预测结果计算loss"></a>二、利用处理完的真实框与对应图片的预测结果计算loss</h2><p>loss的计算分为三个部分：<br>1.获取所有标签的框的预测结果的回归loss<br>2.获取所有正标签的种类的预测结果的交叉熵loss<br>3.获取一定负标签的种类的预测结果的交叉熵loss<br>由于在ssd的训练过程中，正负样本及其不平衡，即存在对应真实框的先验框可能只有十几个，但是不存在对应真实框的负样本却有几千个，这样会导致负样本的loss值极大，因此我们可以考虑减少负样本的选取，对于SSD的训练来讲，常见的情况是取三倍正阉割版数量的负样本用于训练。</p><h1 id="RetinaNet"><a href="#RetinaNet" class="headerlink" title="RetinaNet"></a>RetinaNet</h1><h2 id="一、网络结构-2"><a href="#一、网络结构-2" class="headerlink" title="一、网络结构"></a>一、网络结构</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200414214535128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="网络结构"><br>RetinaNet是何凯明大神提出的，为了解决单阶段正负样本不均衡的问题，提出了focal loss，在特征提取中引入了FPN特征金字塔网络，弥补了SSD的两个缺陷，在单阶段网络中取得了不错的成绩。<br>由于SSD放弃使用已经计算出来的低层特性，而从基础网络中的高层开始构建金字塔，然后添加几个新层。因此，SSD错过了复用特征层级中具有更高分辨率的特征图的机会，而这些低层特征对于检测小目标而言非常重要。</p><h2 id="二、FPN结构"><a href="#二、FPN结构" class="headerlink" title="二、FPN结构"></a>二、FPN结构</h2><p>FPN中自顶向下建造特征图的构建块，使用最近邻采样将较低分辨率的特征图上采样为2倍，然后按元素相加，将上采样后的特征图与相应分辨率的低层特征图合并，得到一个进行了特征融合的较高分辨率的特征图。最后对每个进行了特征融合的特征图进行一次3x3的卷积操作，生成最终的特征图。</p><h2 id="三、聚焦损失函数"><a href="#三、聚焦损失函数" class="headerlink" title="三、聚焦损失函数"></a>三、聚焦损失函数</h2><p>单阶段目标检测比双阶段检测精度低的原因主要是因为前者会面临极端不平衡的目标–背景数据分布。双阶段目标检测方法可以通过候选区域滤除大部分背景区域，但单阶段目标检测方法需要直接面对类别不平衡的问题。</p><p>聚焦损失函数通过改进经典的交叉熵损失函数，降低了网络训练过程中简单背景样本的学习权重，并且可以实现对难样本的聚焦和对网络学习能力的重新分配，感觉有点像注意力机制。</p><p>聚焦损失函数通过改进softmax分类的损失函数，将原来的同权重损失改进为不同权重的损失。在损失中给正负样本加上权重（负样本数量越多，权重越小；正样本数量越少，权重越大）。</p><h2 id="四、困难样本挖掘"><a href="#四、困难样本挖掘" class="headerlink" title="四、困难样本挖掘"></a>四、困难样本挖掘</h2><p>用分类器对样本进行分类，把其中错误分类的样本放入负样本集合再继续训练分类器。<br>对于目标检测中我们会事先标记出GT，然后再算法中生成一系列proposals，proposals与GT的IOU超过一定阈值的则认定为是正样本，低于一定阈值的则是负样本。然后扔进网络训练。但是最终会出现一个问题就是正样本的数量远远小于负样本，这样训练出来的分类器的效果总是有限的，会出现许多false positive.把其中得分高的这些false positive。把其中得分较高的这些false positive当做难负样本。</p><hr><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><h1 id="Mask-R-CNN"><a href="#Mask-R-CNN" class="headerlink" title="Mask R-CNN"></a>Mask R-CNN</h1><h2 id="一-网络结构"><a href="#一-网络结构" class="headerlink" title="一.网络结构"></a>一.网络结构</h2><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200526105347147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>    和Faster R-CNN一样，Mask R-CNN采用了两阶段的结构。第一个阶段的结构是RPN。在第二个阶段中，Mask R-CNN 在预测类别和边界框的基础上，为每个Roi预测一个二值掩码。掩码对目标的空间布局进行了编码。与类别标签不同，这个空间结构可以通过卷积操作所提供的像素到像素的对应关系自然地使用掩码提取出来。Mask R-CNN使用一个全卷积网络，对每个Roi预测K个mxm的掩码。这种像素到像素的操作，要求Roi特征很好地对齐，以显式地保持逐像素的空间对应关系。</p><h2 id="二-RoiAlign"><a href="#二-RoiAlign" class="headerlink" title="二.RoiAlign"></a>二.RoiAlign</h2><p>由于Faster-RCNN中的RoiPooling是将特征图进行7x7的切分，并且进行量化，导致一些浮点数会被约分。最后会导致边界框预测的不是那么准确，但这对于目标检测是足够了，但对于Mask-RCNN的实例分割任务还远远不够。<br>因此MaskRCNN提出了RoIAlign的操作代替RoiPooling,RoiAlign的思想如下图所示。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2020052611104792.png#pic_center" alt="在这里插入图片描述"><br>Roi池化的作用是：根据候选框的位置坐标，在特征图中将相应区域池化为固定尺寸的特征图，以便进行后续的分类和边界框回归操作。用RoiAlign举个例子就是，原图片中大小为665x665的候选区域映射到特征图中，大小为665/32 x 665/32=20.78 x 20.78。此时，不需要像Roi池化那样进行取整操作，RoiAlign会保留20.78这个浮点数。同样采用7x7的特征图，将大小为20.78x20.78的映射区域划分成49个同等大小的bin，每个bin的大小为20.78/7 x 20.78/7 = 2.97x2.97（在这里同样不进行取整处理）。设置一个采样点数，对每个bin采用双线性插值法计算其中采样点的像素值，再进行最大池化操作，即可得到代表该单元的最终值。</p><h1 id="YOLO-v3"><a href="#YOLO-v3" class="headerlink" title="YOLO v3"></a>YOLO v3</h1><h1 id="M2Det"><a href="#M2Det" class="headerlink" title="M2Det"></a>M2Det</h1><h1 id="EffienctDet"><a href="#EffienctDet" class="headerlink" title="EffienctDet"></a>EffienctDet</h1><blockquote><p><a href="https://blog.csdn.net/wfei101/article/details/76400672" target="_blank" rel="noopener">https://blog.csdn.net/wfei101/article/details/76400672</a><br><a href="https://blog.csdn.net/weixin_44791964/article/details/104981486" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44791964/article/details/104981486</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 目标检测 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>COCO和MPII以及Crowdpose数据集进行自定义可视化，不用cocoapi</title>
      <link href="/2020/05/24/coco-he-mpii-yi-ji-crowdpose-shu-ju-ji-jin-xing-zi-ding-yi-ke-shi-hua-bu-yong-cocoapi/"/>
      <url>/2020/05/24/coco-he-mpii-yi-ji-crowdpose-shu-ju-ji-jin-xing-zi-ding-yi-ke-shi-hua-bu-yong-cocoapi/</url>
      
        <content type="html"><![CDATA[<h1 id="COCO数据集进行自定义可视化"><a href="#COCO数据集进行自定义可视化" class="headerlink" title="COCO数据集进行自定义可视化"></a>COCO数据集进行自定义可视化</h1><p>在发人体姿态估计的相关文章时，往往需要得到关节点和肢体的可视化结果，因此写了一个代码结构进行可视化。</p><h2 id="COCO姿态数据集可视化"><a href="#COCO姿态数据集可视化" class="headerlink" title="COCO姿态数据集可视化"></a>COCO姿态数据集可视化</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> json<span class="token keyword">import</span> cv2<span class="token keyword">import</span> random<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmdataset_dir <span class="token operator">=</span> <span class="token string">"D:/send_paper/COCO val2017/val2017/"</span>dataset_save <span class="token operator">=</span> <span class="token string">"D:/send_paper/COCO val2017/result/"</span><span class="token keyword">def</span> <span class="token function">show_skeleton</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>kpts<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thr<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    kpts <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>kpts<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>    skelenton <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    points_num <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sk <span class="token keyword">in</span> skelenton<span class="token punctuation">:</span>        pos1 <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pos2 <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pos1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> thr <span class="token operator">and</span> kpts<span class="token punctuation">[</span>            sk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> thr<span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>img<span class="token punctuation">,</span> pos1<span class="token punctuation">,</span> pos2<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> points <span class="token keyword">in</span> points_num<span class="token punctuation">:</span>        pos <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>points<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>points<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> kpts<span class="token punctuation">[</span>points<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> thr<span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> pos<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#为肢体点画红色实心圆</span>    <span class="token keyword">return</span> img<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"D:/send_paper/keypoints_val2017_results_0.json"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> load_f<span class="token punctuation">:</span>    load_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>load_f<span class="token punctuation">)</span>imgIds_old <span class="token operator">=</span> <span class="token number">0</span>image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">,</span> str<span class="token punctuation">(</span><span class="token number">397133</span><span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>skeleton_color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">154</span><span class="token punctuation">,</span><span class="token number">194</span><span class="token punctuation">,</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">151</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">208</span><span class="token punctuation">,</span><span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">229</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 选择自己喜欢的颜色</span><span class="token keyword">for</span> dict_num <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>load_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgIds <span class="token operator">=</span> dict_num<span class="token punctuation">[</span><span class="token string">"image_id"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> imgIds<span class="token operator">!=</span>imgIds_old<span class="token punctuation">:</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_save<span class="token punctuation">,</span>str<span class="token punctuation">(</span>imgIds_old<span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>image<span class="token punctuation">)</span>        image_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">,</span> str<span class="token punctuation">(</span>imgIds<span class="token punctuation">)</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg'</span><span class="token punctuation">)</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    color <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>skeleton_color<span class="token punctuation">)</span>    show_skeleton<span class="token punctuation">(</span>image<span class="token punctuation">,</span> dict_num<span class="token punctuation">[</span><span class="token string">"keypoints"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span>color<span class="token punctuation">)</span>    imgIds_old <span class="token operator">=</span> imgIds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200524101120956.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200524101120947.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200524101120909.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200524101120888.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200524101120782.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="MPII数据集可视化"><a href="#MPII数据集可视化" class="headerlink" title="MPII数据集可视化"></a>MPII数据集可视化</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> json<span class="token keyword">import</span> cv2<span class="token keyword">import</span> random<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmdataset_dir <span class="token operator">=</span> <span class="token string">"D:/send_paper/MPII/mpii_valid/mpii_valid/"</span>dataset_save <span class="token operator">=</span> <span class="token string">"D:/send_paper/MPII/result/"</span><span class="token keyword">def</span> <span class="token function">show_skeleton</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>kpts<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    skelenton <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                 <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    points_num <span class="token operator">=</span> <span class="token punctuation">[</span>num <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> sk <span class="token keyword">in</span> skelenton<span class="token punctuation">:</span>        pos1 <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        pos2 <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>sk<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pos1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>line<span class="token punctuation">(</span>img<span class="token punctuation">,</span> pos1<span class="token punctuation">,</span> pos2<span class="token punctuation">,</span> color<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> points <span class="token keyword">in</span> points_num<span class="token punctuation">:</span>        pos <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>points<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>int<span class="token punctuation">(</span>kpts<span class="token punctuation">[</span>points<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">and</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">:</span>            cv2<span class="token punctuation">.</span>circle<span class="token punctuation">(</span>img<span class="token punctuation">,</span> pos<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#为肢体点画红色实心圆</span>    <span class="token keyword">return</span> img<span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"D:/send_paper/MPII/valid.json"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> load_f<span class="token punctuation">:</span>    load_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>load_f<span class="token punctuation">)</span>imgIds_old <span class="token operator">=</span> <span class="token string">"0.jpg"</span>image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">,</span> <span class="token string">'005808361.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>skeleton_color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">154</span><span class="token punctuation">,</span><span class="token number">194</span><span class="token punctuation">,</span><span class="token number">182</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">151</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">208</span><span class="token punctuation">,</span><span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">229</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">220</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 选择自己喜欢的颜色</span><span class="token keyword">for</span> dict_num <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>load_dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    imgIds <span class="token operator">=</span> dict_num<span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> imgIds<span class="token operator">!=</span>imgIds_old<span class="token punctuation">:</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_save<span class="token punctuation">,</span>imgIds_old<span class="token punctuation">)</span><span class="token punctuation">,</span>image<span class="token punctuation">)</span>        image_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dataset_dir<span class="token punctuation">,</span> imgIds<span class="token punctuation">)</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>image_path<span class="token punctuation">)</span>    color <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>skeleton_color<span class="token punctuation">)</span>    show_skeleton<span class="token punctuation">(</span>image<span class="token punctuation">,</span> dict_num<span class="token punctuation">[</span><span class="token string">"joints"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>color<span class="token operator">=</span>color<span class="token punctuation">)</span>    imgIds_old <span class="token operator">=</span> imgIds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200526112403641.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200526112427400.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="CrowdPose数据集可视化"><a href="#CrowdPose数据集可视化" class="headerlink" title="CrowdPose数据集可视化"></a>CrowdPose数据集可视化</h2><p>之前两个代码傻傻的没用groupby，真是太菜了</p><p>```python<br>在这里插入代码片import os<br>import numpy as np<br>import json<br>import cv2<br>import random<br>from tqdm import tqdm<br>from itertools import groupby<br>dataset_dir = “D:/send_paper/crowdpose_r/images/images/“<br>dataset_save = “D:/send_paper/crowdpose_r/result”</p><p>def show_skeleton(img,kpts,color=(255,128,128),thr=0.5):<br>    kpts = np.array(kpts).reshape(-1,3)<br>    skelenton = [[0, 2], [1, 3], [2, 4], [3, 5], [6, 8], [8, 10], [7, 9], [9, 11], [12, 13], [0, 13], [1, 13],<br>                 [6,13],[7, 13]]<br>    points_num = [num for num in range(14)]<br>    for sk in skelenton:</p><pre><code>    pos1 = (int(kpts[sk[0], 0]), int(kpts[sk[0], 1]))    pos2 = (int(kpts[sk[1], 0]), int(kpts[sk[1] , 1]))    if pos1[0] &gt; 0 and pos1[1] &gt; 0 and pos2[0] &gt; 0 and pos2[1] &gt; 0 and kpts[sk[0], 2] &gt; thr and kpts[        sk[1], 2] &gt; thr:        cv2.line(img, pos1, pos2, color, 2, 8)for points in points_num:    pos = (int(kpts[points,0]),int(kpts[points,1]))    if pos[0] &gt; 0 and pos[1] &gt; 0 and kpts[points,2] &gt; thr:        cv2.circle(img, pos,4,(0,0,255),-1) #为肢体点画红色实心圆return img</code></pre><p>with open(“D:/send_paper/crowdpose_r/crowdpose_r.json”,”r”) as load_f:<br>    load_dict = json.load(load_f)<br>ret = list()<br>ret_num = list()<br>for group_num,group in groupby(load_dict,lambda x: x[“image_id”]):<br>    ret.append(list(group))<br>    ret_num.append(group_num)<br>for item in ret:<br>    if len(item)&gt;5:<br>        print(item[0][“image_id”])<br>        print(item)<br>ret_result = zip(ret_num,ret)<br>joints=list()<br>skeleton_color = [(154,194,182),(123,151,138),(0,208,244),(8,131,229),(18,87,220)] # 选择自己喜欢的颜色<br>for num,person_mss in tqdm(ret_result):<br>    if num == 101107:<br>        image = cv2.imread(os.path.join(dataset_dir,str(num)+’.jpg’))<br>        for person_num in range(len(person_mss)):<br>            person_1 = np.array(person_mss[person_num][‘keypoints’]).reshape(-1, 3)<br>            color=random.choice(skeleton_color)<br>            show_skeleton(image,person_1,color=color)<br>        cv2.imwrite(os.path.join(dataset_save,str(num)+’.jpg’),image)```<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20200626094905178.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 人体姿态识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人体姿态识别 </tag>
            
            <tag> 数据集可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity3d实现鼠标控制相机绕物体旋转（带阻尼）</title>
      <link href="/2020/01/18/unity3d-shi-xian-shu-biao-kong-zhi-xiang-ji-rao-wu-ti-xuan-zhuan-dai-zu-ni/"/>
      <url>/2020/01/18/unity3d-shi-xian-shu-biao-kong-zhi-xiang-ji-rao-wu-ti-xuan-zhuan-dai-zu-ni/</url>
      
        <content type="html"><![CDATA[<p>本来想的是用四元数实现球性插值实现阻尼效果，但是不知道四元数怎么绕定点旋转。因此用速度衰减的方法进行实现。<br>1.实现鼠标控制相机带阻尼旋转<br>2.实现鼠标中键放大鼠标所在位置的</p><pre class="line-numbers language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> UnityEngine<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">rotate1</span> <span class="token punctuation">:</span> MonoBehaviour<span class="token punctuation">{</span>    <span class="token keyword">public</span> Transform CenObj<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//围绕的物体</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> ratio <span class="token operator">=</span> <span class="token number">1.0f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//放大缩小速率</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> min_distance <span class="token operator">=</span> <span class="token number">5.0f</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//相机距物体最小距离</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> max_distance <span class="token operator">=</span> <span class="token number">10.0f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相机距物体最大距离</span>    <span class="token comment" spellcheck="true">//滑动结束时的瞬时速度</span>    Vector3 Speed <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每帧偏差</span>    Vector3 offSet <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//速率衰减值</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> decelerationRate <span class="token operator">=</span> <span class="token number">0.2f</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Vector3 Rotion_Transform<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">new</span> <span class="token class-name">Camera</span> camera<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        camera <span class="token operator">=</span> <span class="token generic-method function">GetComponent<span class="token punctuation">&lt;</span>Camera<span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Rotion_Transform <span class="token operator">=</span> CenObj<span class="token punctuation">.</span>position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Ctrl_Cam_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Cam_Ctrl_Rotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//镜头的远离和接近</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Ctrl_Cam_Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Vector3 mousePos <span class="token operator">=</span> camera<span class="token punctuation">.</span><span class="token function">ScreenToWorldPoint</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Vector3</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">.</span>x<span class="token punctuation">,</span> Input<span class="token punctuation">.</span>mousePosition<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0.1f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse ScrollWheel"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>CenObj<span class="token punctuation">.</span>position<span class="token punctuation">,</span>camera<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">></span>min_distance<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//放大</span>        <span class="token punctuation">{</span>            camera<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span><span class="token operator">=</span> ratio <span class="token operator">*</span> <span class="token punctuation">(</span>camera<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> mousePos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse ScrollWheel"</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Vector3<span class="token punctuation">.</span><span class="token function">Distance</span><span class="token punctuation">(</span>CenObj<span class="token punctuation">.</span>position<span class="token punctuation">,</span>camera<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token operator">&lt;</span>max_distance<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//缩小</span>        <span class="token punctuation">{</span>            camera<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">+</span><span class="token operator">=</span> ratio <span class="token operator">*</span> <span class="token punctuation">(</span>camera<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position <span class="token operator">-</span> mousePos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//摄像机的旋转</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Cam_Ctrl_Rotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">var</span> mouse_x <span class="token operator">=</span> Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse X"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取鼠标X轴移动</span>        <span class="token keyword">var</span> mouse_y <span class="token operator">=</span> <span class="token operator">-</span>Input<span class="token punctuation">.</span><span class="token function">GetAxis</span><span class="token punctuation">(</span><span class="token string">"Mouse Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取鼠标Y轴移动</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Input<span class="token punctuation">.</span><span class="token function">GetMouseButton</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            offSet<span class="token punctuation">.</span>x <span class="token operator">=</span> mouse_x<span class="token punctuation">;</span>            offSet<span class="token punctuation">.</span>y <span class="token operator">=</span> mouse_y<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//瞬时速度</span>            Speed <span class="token operator">=</span> offSet <span class="token operator">/</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            Speed <span class="token operator">*</span><span class="token operator">=</span> Mathf<span class="token punctuation">.</span><span class="token function">Pow</span><span class="token punctuation">(</span>decelerationRate<span class="token punctuation">,</span> Time<span class="token punctuation">.</span>deltaTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Mathf<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Magnitude</span><span class="token punctuation">(</span>Speed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Speed <span class="token operator">=</span> Vector3<span class="token punctuation">.</span>zero<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">Move</span><span class="token punctuation">(</span>Speed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Move</span><span class="token punctuation">(</span>Vector3 speed<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Vector3<span class="token punctuation">.</span><span class="token function">Magnitude</span><span class="token punctuation">(</span>speed<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Debug<span class="token punctuation">.</span><span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"Move"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transform<span class="token punctuation">.</span><span class="token function">RotateAround</span><span class="token punctuation">(</span>Rotion_Transform<span class="token punctuation">,</span> Vector3<span class="token punctuation">.</span>up<span class="token punctuation">,</span> speed<span class="token punctuation">.</span>x<span class="token operator">*</span>Time<span class="token punctuation">.</span>deltaTime<span class="token operator">*</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        transform<span class="token punctuation">.</span><span class="token function">RotateAround</span><span class="token punctuation">(</span>Rotion_Transform<span class="token punctuation">,</span> transform<span class="token punctuation">.</span>right<span class="token punctuation">,</span> speed<span class="token punctuation">.</span>y<span class="token operator">*</span>Time<span class="token punctuation">.</span>deltaTime<span class="token operator">*</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Unity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TX2安装jetpack4.3,随后配置yolov3及pytorch1.3全过程</title>
      <link href="/2019/12/29/tx2-an-zhuang-jetpack4-3-sui-hou-pei-zhi-yolov3-ji-pytorch1-3-quan-guo-cheng/"/>
      <url>/2019/12/29/tx2-an-zhuang-jetpack4-3-sui-hou-pei-zhi-yolov3-ji-pytorch1-3-quan-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="TX2采坑全集"><a href="#TX2采坑全集" class="headerlink" title="TX2采坑全集"></a>TX2采坑全集</h1><h2 id="TX2安装jetpack4-3"><a href="#TX2安装jetpack4-3" class="headerlink" title="TX2安装jetpack4.3"></a>TX2安装jetpack4.3</h2><p><a href="https://blog.csdn.net/zt1091574181/article/details/88847775" target="_blank" rel="noopener">参考博客</a></p><ol><li>安装<strong>sdkmanager</strong>(需要注册nvidia账号)</li><li>选择安装的jetpack版本和TX2机型</li><li>进行下载安装，建议先选择只下载后安装，下载之前要给主机添加arm的源，否则可能会下载失败；下载失败也没关系，多retry一下就可以。</li><li>进行安装，首先拿一条usb数据线将主机与TX2相连，在往TX2烧录数据之前，会提示你将TX2进行重置，按操作要求重置就好，重置完毕后，就会像装ubuntu一样，在TX2上先装一个ubuntu18.04。安装完毕之后，设置账号密码，随后在安装进度大约49%的时候，会提示你与TX2建立ssh连接，账号，密码就填你之前设置好的TX2的账号密码。随后就等待安装。如果你一次安装成功了，那真是太棒了，欧皇。<h3 id="安装cuda成功"><a href="#安装cuda成功" class="headerlink" title="安装cuda成功"></a>安装cuda成功</h3>这时候你要在~/.bashrc中配置cuda和cudnn的路径<br><code>sudo gedit ~/.bashrc</code><br>打开文件后，在文件的最后添加<br><code>export PATH="/usr/local/cuda-10.0/bin:$PATH"</code><br><code>export LD_LIBRARY_PATH="/usr/local/cuda-10.0/lib64:$LD_LIBRARY_PATH"</code><br><code>export CUDNN_LIB_DIR=/usr/lib/aarch64-linux-gnu</code><br><code>export CUDNN_INCLUDE_DIR=/usr/include</code><br>然后source ~/.bashrc<h3 id="安装cuda失败"><a href="#安装cuda失败" class="headerlink" title="安装cuda失败"></a>安装cuda失败</h3>如果你retry了好多遍也安装不成功的话，也没关系，毕竟有人已经走过你走的路了，接着看就行。我按照一位大佬的博客<a href="https://blog.csdn.net/Zhaoxi_Li/article/details/100803353" target="_blank" rel="noopener">参考博客</a>接着安装就好，其中安装libnvinfer-samples_巴拉巴拉的文件的时候，博客上没有说，应该先安装这些依赖<br>libnvinfer-plugin-dev<br>libnvinfer-plugin-dev-cross-aarch64<br>libnvparsers-dev<br>libnvparsers-dev-cross-aarch64<br>libnvonnxparsers-dev<br>livnvonnxparsers-dev-cross-aarch64<br>其他安装步骤就和参考博客一致就好，安装完成后可以去cuda-10.0的samples里找一个大海的demo实验一下是否成功，找到文件夹后一定要sudo make，不能只make。<h3 id="安装opencv"><a href="#安装opencv" class="headerlink" title="安装opencv"></a>安装opencv</h3>jetpack4.3里是自带opencv4.1.1的，但是它只能在python里import,在配置yolov3的时候，找不到opencv，于是我就怒卸opencv，在官网上找了一个3.4.5的源码，自行编译。<a href="https://blog.csdn.net/ZHLCHLC/article/details/89762980" target="_blank" rel="noopener">参考博客</a>,其中博客上一开始让下载的依赖包有的没有，貌似有两个，其实可以不下，删除了就行。然后你就根据博客上的操作进行就行，jetpack4.3有一个更新的地方就是它的开启风扇的文件不在home里了，在/usr/bin的jetson_clocks文件，编译的时候记得开启最大功耗和小风扇。</li></ol><h2 id="TX2配置yolov3"><a href="#TX2配置yolov3" class="headerlink" title="TX2配置yolov3"></a>TX2配置yolov3</h2><p>经过以上步骤之后，随便搜一个TX2配置yolov3编译一下，跑一下demo就完事了，但是有一个小坑，就是要在cfg文件夹下修改yolov3.cfg，将batch和下面的那个参数改小一点，平均一张图片0.5s。</p><h2 id="TX2安装pytorch"><a href="#TX2安装pytorch" class="headerlink" title="TX2安装pytorch"></a>TX2安装pytorch</h2><p>安装pytorch，网上一搜全是天坑啊啥的,在这我就要感叹时代在进步啊，pytorch官网想的周全啊。</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191229155424567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="厉害吧"><br>人家已经给你编译好了，这里注意需要jetpack4.2以上版本，这时候你就把这东西下载下来，直接<code>python3 install 巴拉巴拉.whl</code>就安装成功了，这时候你去python里import试一试，如果出错了，可能是numpy的版本不够高，升级一下numpy版本就行了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题与bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TX2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3.7+Cmake+Boost+VS2017+dlib成功安装face_recognition</title>
      <link href="/2019/11/12/python3-7-cmake-boost-vs2017-dlib-cheng-gong-an-zhuang-face-recognition/"/>
      <url>/2019/11/12/python3-7-cmake-boost-vs2017-dlib-cheng-gong-an-zhuang-face-recognition/</url>
      
        <content type="html"><![CDATA[<p>face_recognition开源人脸识别库凭借超高的准确度，变得十分热门，但是我们如果仅仅使用pip安装face_recognition，大概率会报错。<br>那么需要自己去官网安装dlib库，官网下载地址<a href="https://pypi.org/project/dlib/#files" target="_blank" rel="noopener">https://pypi.org/project/dlib/#files</a><br>1.在官网下载地址中选一个dlib版本进行下载，我的是dlib19.14.0。<br>2.为了确保可以安装成功，你的环境中首先需要有完全更新过的VS2015或VS2017，这是一个大坑<br>3.此外，你要保证有你的环境中配置好了cmake,需要在自己的系统变量中设置好<br>4.设置cl.exe的环境变量，cl.exe可以直接在此电脑里搜索。具体参见博客<a href="https://blog.csdn.net/zhang475546259/article/details/84104368" target="_blank" rel="noopener">https://blog.csdn.net/zhang475546259/article/details/84104368</a><br>5.从官网中下载boost,然后根据博客<a href="https://blog.csdn.net/zhang475546259/article/details/84104368中的步骤进行安装" target="_blank" rel="noopener">https://blog.csdn.net/zhang475546259/article/details/84104368中的步骤进行安装</a><br>6.在你解压好的dlib文件夹中路径中输入cmd进入命令行，输入python setup.py install,完成对dlib的安装<br>7.pip install face_recognition<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191112115126996.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题与bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人脸识别 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Pycharm中使用机器学习自动补全插件TabNine</title>
      <link href="/2019/10/03/ru-he-zai-pycharm-zhong-shi-yong-ji-qi-xue-xi-zi-dong-bu-quan-cha-jian-tabnine/"/>
      <url>/2019/10/03/ru-he-zai-pycharm-zhong-shi-yong-ji-qi-xue-xi-zi-dong-bu-quan-cha-jian-tabnine/</url>
      
        <content type="html"><![CDATA[<p>TabNine是一款机器学习的自动补全插件<br>首先在pycharm中ctrl+alt+s打开设置,点击Plugins，在右边搜索TabNine</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191003224305921.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">然后点击安装，安装后重启pycharm,然后点击下图所示的区域<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191003224735871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击加号，然后选择TabNine<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191003224940273.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">此时，你就可以解锁tabNine的普通补全功能了<br>然后，选择帮助中的的选项</p><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191003225224743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在<img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20191003225400452.png" alt="在这里插入图片描述"><br>其中输入TabNine::config,一定要自己输入，这时会弹出网站，按照网站上的操作进行注册，就可以解锁机器学习功能啦</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题与bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语义分割由简入繁，经典的代码实现（tensorflow+keras）</title>
      <link href="/2019/07/29/yu-yi-fen-ge-you-jian-ru-fan-jing-dian-de-dai-ma-shi-xian-tensorflow-keras/"/>
      <url>/2019/07/29/yu-yi-fen-ge-you-jian-ru-fan-jing-dian-de-dai-ma-shi-xian-tensorflow-keras/</url>
      
        <content type="html"><![CDATA[<p>做语义分割的话，第一步就是要制作数据集了，当然你也可以找官方的数据集进行训练，下面我们就先说明如何制作数据集。</p><ul><li>官方数据集：1.coco 2.cityscapes</li><li>制作自己的数据集</li></ul><p> 1.首先看网络所要求的数据集格式，像segnet,unet，这些网络，所要求的的数据集，应包含两个文件夹<br> <img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/2019072910431883.png" alt="数据集格式"><br>label是一个8位的灰度图，每一个灰度值对应于原图中的一个类<br>src是语义分割的原图。这里注意要根据自己电脑的显存大小切割合适的图片尺寸大小，不然显存会爆炸。QWQ详细制作数据集的代码在我的博客里有写到<a href="https://mp.csdn.net/mdeditor/94402617#" target="_blank" rel="noopener">https://mp.csdn.net/mdeditor/94402617#</a><br>那么对于pspnet，制作数据集的时候不仅要做出label和src，而且还要做一个list.txt，这里存放着label和src的地址。<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190729104951893.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RDR0o2NjY=,size_16,color_FFFFFF,t_70" alt="list">对于deeplabv3+,它需要在制作好图片以及list之后还需要制作tfrecord<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="https://img-blog.csdnimg.cn/20190729105557595.png" alt="deeplab"><br>然后用官方的程序，制作tfrecord</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Copyright 2018 The TensorFlow Authors All Rights Reserved.</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Licensed under the Apache License, Version 2.0 (the "License");</span><span class="token comment" spellcheck="true"># you may not use this file except in compliance with the License.</span><span class="token comment" spellcheck="true"># You may obtain a copy of the License at</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     http://www.apache.org/licenses/LICENSE-2.0</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># Unless required by applicable law or agreed to in writing, software</span><span class="token comment" spellcheck="true"># distributed under the License is distributed on an "AS IS" BASIS,</span><span class="token comment" spellcheck="true"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><span class="token comment" spellcheck="true"># See the License for the specific language governing permissions and</span><span class="token comment" spellcheck="true"># limitations under the License.</span><span class="token comment" spellcheck="true"># ==============================================================================</span><span class="token triple-quoted-string string">"""Converts PASCAL VOC 2012 data to TFRecord file format with Example protos.PASCAL VOC 2012 dataset is expected to have the following directory structure:  + pascal_voc_seg    - build_data.py    - build_voc2012_data.py (current working directory).    + VOCdevkit      + VOC2012        + JPEGImages        + SegmentationClass        + ImageSets          + Segmentation    + tfrecordImage folder:  ./VOCdevkit/VOC2012/JPEGImagesSemantic segmentation annotations:  ./VOCdevkit/VOC2012/SegmentationClasslist folder:  ./VOCdevkit/VOC2012/ImageSets/SegmentationThis script converts data into sharded data files and save at tfrecord folder.The Example proto contains the following fields:  image/encoded: encoded image content.  image/filename: image filename.  image/format: image file format.  image/height: image height.  image/width: image width.  image/channels: image channels.  image/segmentation/class/encoded: encoded semantic segmentation content.  image/segmentation/class/format: semantic segmentation file format."""</span><span class="token keyword">import</span> math<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> sys<span class="token keyword">import</span> build_data<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfFLAGS <span class="token operator">=</span> tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>FLAGStf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span><span class="token string">'image_folder'</span><span class="token punctuation">,</span>                           <span class="token string">'./pro/JPEGImages'</span><span class="token punctuation">,</span>                           <span class="token string">'Folder containing images.'</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span>    <span class="token string">'semantic_segmentation_folder'</span><span class="token punctuation">,</span>    <span class="token string">'./pro/SegmentationClass'</span><span class="token punctuation">,</span>    <span class="token string">'Folder containing semantic segmentation annotations.'</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span>    <span class="token string">'list_folder'</span><span class="token punctuation">,</span>    <span class="token string">'./pro/ImageSets/Segmentation'</span><span class="token punctuation">,</span>    <span class="token string">'Folder containing lists for training and validation'</span><span class="token punctuation">)</span>tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>flags<span class="token punctuation">.</span>DEFINE_string<span class="token punctuation">(</span>    <span class="token string">'output_dir'</span><span class="token punctuation">,</span>    <span class="token string">'./pro/tfrecord'</span><span class="token punctuation">,</span>    <span class="token string">'Path to save converted SSTable of TensorFlow examples.'</span><span class="token punctuation">)</span>_NUM_SHARDS <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">def</span> <span class="token function">_convert_dataset</span><span class="token punctuation">(</span>dataset_split<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">"""Converts the specified dataset split to TFRecord format.  Args:    dataset_split: The dataset split (e.g., train, test).  Raises:    RuntimeError: If loaded image and label have different shape.  """</span>  dataset <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>dataset_split<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>  sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'Processing '</span> <span class="token operator">+</span> dataset<span class="token punctuation">)</span>  filenames <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> open<span class="token punctuation">(</span>dataset_split<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>filenames<span class="token punctuation">)</span>  num_images <span class="token operator">=</span> len<span class="token punctuation">(</span>filenames<span class="token punctuation">)</span>  num_per_shard <span class="token operator">=</span> int<span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>num_images <span class="token operator">/</span> float<span class="token punctuation">(</span>_NUM_SHARDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  image_reader <span class="token operator">=</span> build_data<span class="token punctuation">.</span>ImageReader<span class="token punctuation">(</span><span class="token string">'png'</span><span class="token punctuation">,</span> channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  label_reader <span class="token operator">=</span> build_data<span class="token punctuation">.</span>ImageReader<span class="token punctuation">(</span><span class="token string">'png'</span><span class="token punctuation">,</span> channels<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#label_reader = build_data.ImageReader('tif', channels=1)</span>  <span class="token keyword">for</span> shard_id <span class="token keyword">in</span> range<span class="token punctuation">(</span>_NUM_SHARDS<span class="token punctuation">)</span><span class="token punctuation">:</span>    output_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>        FLAGS<span class="token punctuation">.</span>output_dir<span class="token punctuation">,</span>        <span class="token string">'%s-%05d-of-%05d.tfrecord'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> shard_id<span class="token punctuation">,</span> _NUM_SHARDS<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>python_io<span class="token punctuation">.</span>TFRecordWriter<span class="token punctuation">(</span>output_filename<span class="token punctuation">)</span> <span class="token keyword">as</span> tfrecord_writer<span class="token punctuation">:</span>      start_idx <span class="token operator">=</span> shard_id <span class="token operator">*</span> num_per_shard      end_idx <span class="token operator">=</span> min<span class="token punctuation">(</span><span class="token punctuation">(</span>shard_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> num_per_shard<span class="token punctuation">,</span> num_images<span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>start_idx<span class="token punctuation">,</span> end_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\r>> Converting image %d/%d shard %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>            i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>filenames<span class="token punctuation">)</span><span class="token punctuation">,</span> shard_id<span class="token punctuation">)</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Read the image.</span>        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        image_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>            FLAGS<span class="token punctuation">.</span>image_folder<span class="token punctuation">,</span> filenames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token string">'png'</span><span class="token punctuation">)</span>        image_data <span class="token operator">=</span> tf<span class="token punctuation">.</span>gfile<span class="token punctuation">.</span>FastGFile<span class="token punctuation">(</span>image_filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        height<span class="token punctuation">,</span> width <span class="token operator">=</span> image_reader<span class="token punctuation">.</span>read_image_dims<span class="token punctuation">(</span>image_data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Read the semantic segmentation annotation.</span>        seg_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>            FLAGS<span class="token punctuation">.</span>semantic_segmentation_folder<span class="token punctuation">,</span>            filenames<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> <span class="token string">'png'</span><span class="token punctuation">)</span>        seg_data <span class="token operator">=</span> tf<span class="token punctuation">.</span>gfile<span class="token punctuation">.</span>FastGFile<span class="token punctuation">(</span>seg_filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        seg_height<span class="token punctuation">,</span> seg_width <span class="token operator">=</span> label_reader<span class="token punctuation">.</span>read_image_dims<span class="token punctuation">(</span>seg_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> height <span class="token operator">!=</span> seg_height <span class="token operator">or</span> width <span class="token operator">!=</span> seg_width<span class="token punctuation">:</span>          <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span><span class="token string">'Shape mismatched between image and label.'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Convert to tf example.</span>        example <span class="token operator">=</span> build_data<span class="token punctuation">.</span>image_seg_to_tfexample<span class="token punctuation">(</span>            image_data<span class="token punctuation">,</span> filenames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> width<span class="token punctuation">,</span> seg_data<span class="token punctuation">)</span>        tfrecord_writer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>example<span class="token punctuation">.</span>SerializeToString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>unused_argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  dataset_splits <span class="token operator">=</span> tf<span class="token punctuation">.</span>gfile<span class="token punctuation">.</span>Glob<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>FLAGS<span class="token punctuation">.</span>list_folder<span class="token punctuation">,</span> <span class="token string">'*.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> dataset_split <span class="token keyword">in</span> dataset_splits<span class="token punctuation">:</span>    _convert_dataset<span class="token punctuation">(</span>dataset_split<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  tf<span class="token punctuation">.</span>app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始训练</p><ol><li>segnet</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> matplotlibmatplotlib<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"Agg"</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> argparse<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span>MaxPooling2D<span class="token punctuation">,</span>UpSampling2D<span class="token punctuation">,</span>BatchNormalization<span class="token punctuation">,</span>Reshape<span class="token punctuation">,</span>Permute<span class="token punctuation">,</span>Activation  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>np_utils <span class="token keyword">import</span> to_categorical  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> img_to_array  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ModelCheckpoint<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">import</span> cv2<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"CUDA_VISIBLE_DEVICES"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span>seed <span class="token operator">=</span> <span class="token number">7</span>  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#data_shape = 360*480  </span>img_w <span class="token operator">=</span> <span class="token number">256</span>img_h <span class="token operator">=</span> <span class="token number">256</span><span class="token comment" spellcheck="true">#有一个为背景  </span>n_label <span class="token operator">=</span> <span class="token number">16</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">.</span><span class="token punctuation">]</span>labelencoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>  labelencoder<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>classes<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># image_sets = ['1.png','2.png','3.png']</span><span class="token keyword">def</span> <span class="token function">load_img</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> grayscale<span class="token punctuation">:</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float"</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span>    <span class="token keyword">return</span> imgfilepath <span class="token operator">=</span><span class="token string">'D:/rssrai2019_semantic_segmentation/segnet_pic/'</span><span class="token keyword">def</span> <span class="token function">get_train_val</span><span class="token punctuation">(</span>val_rate <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        train_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    val_set  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pic <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_url<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pic<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_url<span class="token punctuation">)</span>    total_num <span class="token operator">=</span> len<span class="token punctuation">(</span>train_url<span class="token punctuation">)</span>    val_num <span class="token operator">=</span> int<span class="token punctuation">(</span>val_rate <span class="token operator">*</span> total_num<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> val_num<span class="token punctuation">:</span>            val_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_url<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            train_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_url<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train_set<span class="token punctuation">,</span>val_set<span class="token comment" spellcheck="true"># data for training  </span><span class="token keyword">def</span> <span class="token function">generateData</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#print 'generateData...'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          train_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          train_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          batch <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             url <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            batch <span class="token operator">+=</span> <span class="token number">1</span>             img <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'src/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            img <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>             train_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              label <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'label/'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>img_w <span class="token operator">*</span> img_h<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># print label.shape  </span>            train_label<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>              <span class="token keyword">if</span> batch <span class="token operator">%</span> batch_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#print 'get enough bacth!\n'</span>                train_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>                  train_label <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_label<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>                  train_label <span class="token operator">=</span> labelencoder<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>train_label<span class="token punctuation">)</span>                  train_label <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>train_label<span class="token punctuation">,</span> num_classes<span class="token operator">=</span>n_label<span class="token punctuation">)</span>                  train_label <span class="token operator">=</span> train_label<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>img_w <span class="token operator">*</span> img_h<span class="token punctuation">,</span>n_label<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token keyword">yield</span> <span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>                  train_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  train_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  batch <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># data for validation </span><span class="token keyword">def</span> <span class="token function">generateValidData</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#print 'generateValidData...'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          valid_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          valid_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          batch <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              url <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            batch <span class="token operator">+=</span> <span class="token number">1</span>              img <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'src/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            img <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              valid_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              label <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'label/'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>img_w <span class="token operator">*</span> img_h<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># print label.shape  </span>            valid_label<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>              <span class="token keyword">if</span> batch <span class="token operator">%</span> batch_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                  valid_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid_data<span class="token punctuation">)</span>                  valid_label <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid_label<span class="token punctuation">)</span><span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>                  valid_label <span class="token operator">=</span> labelencoder<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>valid_label<span class="token punctuation">)</span>                  valid_label <span class="token operator">=</span> to_categorical<span class="token punctuation">(</span>valid_label<span class="token punctuation">,</span> num_classes<span class="token operator">=</span>n_label<span class="token punctuation">)</span>                  valid_label <span class="token operator">=</span> valid_label<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>img_w <span class="token operator">*</span> img_h<span class="token punctuation">,</span>n_label<span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token keyword">yield</span> <span class="token punctuation">(</span>valid_data<span class="token punctuation">,</span>valid_label<span class="token punctuation">)</span>                  valid_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  valid_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  batch <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> <span class="token function">SegNet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#encoder  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span>img_w<span class="token punctuation">,</span>img_h<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(128,128)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(64,64)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(32,32)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(16,16)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(8,8)  </span>    <span class="token comment" spellcheck="true">#decoder  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(16,16)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(32,32)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(64,64)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(128,128)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#(256,256)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span>img_w<span class="token punctuation">,</span> img_h<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>BatchNormalization<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Conv2D<span class="token punctuation">(</span>n_label<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strides<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">'same'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>n_label<span class="token punctuation">,</span>img_w<span class="token operator">*</span>img_h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#axis=1和axis=2互换位置，等同于np.swapaxes(layer,1,2)  </span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Permute<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>Activation<span class="token punctuation">(</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span>optimizer<span class="token operator">=</span><span class="token string">'sgd'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      model<span class="token punctuation">.</span>summary<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> model  <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>     EPOCHS <span class="token operator">=</span> <span class="token number">10</span>    BS <span class="token operator">=</span> <span class="token number">16</span>    model <span class="token operator">=</span> SegNet<span class="token punctuation">(</span><span class="token punctuation">)</span>      modelcheck <span class="token operator">=</span> ModelCheckpoint<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>monitor<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span>save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>    callable <span class="token operator">=</span> <span class="token punctuation">[</span>modelcheck<span class="token punctuation">]</span>      train_set<span class="token punctuation">,</span>val_set <span class="token operator">=</span> get_train_val<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_numb <span class="token operator">=</span> len<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span>      valid_numb <span class="token operator">=</span> len<span class="token punctuation">(</span>val_set<span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"the number of train data is"</span><span class="token punctuation">,</span>train_numb<span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"the number of val data is"</span><span class="token punctuation">,</span>valid_numb<span class="token punctuation">)</span>    H <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>generator<span class="token operator">=</span>generateData<span class="token punctuation">(</span>BS<span class="token punctuation">,</span>train_set<span class="token punctuation">)</span><span class="token punctuation">,</span>steps_per_epoch<span class="token operator">=</span>train_numb<span class="token operator">//</span>BS<span class="token punctuation">,</span>epochs<span class="token operator">=</span>EPOCHS<span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                      validation_data<span class="token operator">=</span>generateValidData<span class="token punctuation">(</span>BS<span class="token punctuation">,</span>val_set<span class="token punctuation">)</span><span class="token punctuation">,</span>validation_steps<span class="token operator">=</span>valid_numb<span class="token operator">//</span>BS<span class="token punctuation">,</span>callbacks<span class="token operator">=</span>callable<span class="token punctuation">,</span>max_q_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># plot the training loss and accuracy</span>    plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"ggplot"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    N <span class="token operator">=</span> EPOCHS    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"loss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train_loss"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"val_loss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val_loss"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"acc"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train_acc"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"val_acc"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val_acc"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Training Loss and Accuracy on SegNet Satellite Seg"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Epoch #"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Loss/Accuracy"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"lower left"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"plot"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">args_parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># construct the argument parse and parse the arguments</span>    ap <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-a"</span><span class="token punctuation">,</span> <span class="token string">"--augment"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"using data augment or not"</span><span class="token punctuation">,</span>                    action<span class="token operator">=</span><span class="token string">"store_true"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"--model"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                    help<span class="token operator">=</span><span class="token string">"path to output model"</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-p"</span><span class="token punctuation">,</span> <span class="token string">"--plot"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"plot.png"</span><span class="token punctuation">,</span>                    help<span class="token operator">=</span><span class="token string">"path to output accuracy/loss plot"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> vars<span class="token punctuation">(</span>ap<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> args<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>      args <span class="token operator">=</span> args_parse<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> args<span class="token punctuation">[</span><span class="token string">'augment'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        filepath <span class="token operator">=</span><span class="token string">'./aug/train/'</span>    train<span class="token punctuation">(</span>args<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#predict()  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预测</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> argparse<span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> img_to_array<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> load_model<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"CUDA_VISIBLE_DEVICES"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>TEST_SET <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.png'</span><span class="token punctuation">,</span><span class="token string">'2.png'</span><span class="token punctuation">,</span><span class="token string">'3.png'</span><span class="token punctuation">]</span>image_size <span class="token operator">=</span> <span class="token number">256</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  labelencoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>  labelencoder<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>classes<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">args_parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># construct the argument parse and parse the arguments</span>    ap <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"--model"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">"path to trained model model"</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-s"</span><span class="token punctuation">,</span> <span class="token string">"--stride"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">"crop slide stride"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span>image_size<span class="token punctuation">)</span>    args <span class="token operator">=</span> vars<span class="token punctuation">(</span>ap<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> args<span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># load the trained convolutional neural network</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[INFO] loading network..."</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> load_model<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"model"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    stride <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>TEST_SET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> TEST_SET<span class="token punctuation">[</span>n<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#load the image</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./test/'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>        h<span class="token punctuation">,</span>w<span class="token punctuation">,</span>_ <span class="token operator">=</span> image<span class="token punctuation">.</span>shape        padding_h <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">//</span>stride <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> stride         padding_w <span class="token operator">=</span> <span class="token punctuation">(</span>w<span class="token operator">//</span>stride <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> stride        padding_img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>padding_h<span class="token punctuation">,</span>padding_w<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        padding_img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span>w<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        padding_img <span class="token operator">=</span> padding_img<span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"float"</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span>        padding_img <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>padding_img<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'src:'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>padding_img<span class="token punctuation">.</span>shape        mask_whole <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>padding_h<span class="token punctuation">,</span>padding_w<span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>padding_h<span class="token operator">//</span>stride<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>padding_w<span class="token operator">//</span>stride<span class="token punctuation">)</span><span class="token punctuation">:</span>                crop <span class="token operator">=</span> padding_img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">]</span>                _<span class="token punctuation">,</span>ch<span class="token punctuation">,</span>cw <span class="token operator">=</span> crop<span class="token punctuation">.</span>shape                <span class="token keyword">if</span> ch <span class="token operator">!=</span> <span class="token number">256</span> <span class="token operator">or</span> cw <span class="token operator">!=</span> <span class="token number">256</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'invalid size!'</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                crop <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>crop<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print 'crop:',crop.shape</span>                pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict_classes<span class="token punctuation">(</span>crop<span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                pred <span class="token operator">=</span> labelencoder<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>pred<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true">#print (np.unique(pred))  </span>                pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print 'pred:',pred.shape</span>                mask_whole<span class="token punctuation">[</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">]</span> <span class="token operator">=</span> pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'./predict/pre'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">,</span>mask_whole<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> args_parse<span class="token punctuation">(</span><span class="token punctuation">)</span>    predict<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>unet<br>训练</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#coding=utf-8</span><span class="token keyword">import</span> matplotlibmatplotlib<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"Agg"</span><span class="token punctuation">)</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> argparse<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Sequential  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Conv2D<span class="token punctuation">,</span>MaxPooling2D<span class="token punctuation">,</span>UpSampling2D<span class="token punctuation">,</span>BatchNormalization<span class="token punctuation">,</span>Reshape<span class="token punctuation">,</span>Permute<span class="token punctuation">,</span>Activation<span class="token punctuation">,</span>Input  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>np_utils <span class="token keyword">import</span> to_categorical  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> img_to_array  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>callbacks <span class="token keyword">import</span> ModelCheckpoint  <span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  <span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> Model<span class="token keyword">from</span> keras<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>merge <span class="token keyword">import</span> concatenate<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image  <span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt  <span class="token keyword">import</span> cv2<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm  os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"CUDA_VISIBLE_DEVICES"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span>seed <span class="token operator">=</span> <span class="token number">7</span>  np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#data_shape = 360*480  </span>img_w <span class="token operator">=</span> <span class="token number">256</span>  img_h <span class="token operator">=</span> <span class="token number">256</span>  <span class="token comment" spellcheck="true">#有一个为背景  </span><span class="token comment" spellcheck="true">#n_label = 4+1  </span>n_label <span class="token operator">=</span> <span class="token number">1</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">.</span><span class="token punctuation">]</span>labelencoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>  labelencoder<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>classes<span class="token punctuation">)</span>  image_sets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.png'</span><span class="token punctuation">,</span><span class="token string">'2.png'</span><span class="token punctuation">,</span><span class="token string">'3.png'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">load_img</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> grayscale<span class="token punctuation">:</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>        img <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token string">"float"</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">255.0</span>    <span class="token keyword">return</span> imgfilepath <span class="token operator">=</span><span class="token string">'G:/unet/'</span><span class="token keyword">def</span> <span class="token function">get_train_val</span><span class="token punctuation">(</span>val_rate <span class="token operator">=</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_url <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        train_set <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    val_set  <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> pic <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_url<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pic<span class="token punctuation">)</span>    random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>train_url<span class="token punctuation">)</span>    total_num <span class="token operator">=</span> len<span class="token punctuation">(</span>train_url<span class="token punctuation">)</span>    val_num <span class="token operator">=</span> int<span class="token punctuation">(</span>val_rate <span class="token operator">*</span> total_num<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">&lt;</span> val_num<span class="token punctuation">:</span>            val_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_url<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token keyword">else</span><span class="token punctuation">:</span>            train_set<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_url<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train_set<span class="token punctuation">,</span>val_set<span class="token comment" spellcheck="true"># data for training  </span><span class="token keyword">def</span> <span class="token function">generateData</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#print 'generateData...'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          train_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          train_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          batch <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             url <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            batch <span class="token operator">+=</span> <span class="token number">1</span>             img <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'src/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            img <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              train_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              label <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'label_1/'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>label<span class="token punctuation">)</span>            train_label<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>              <span class="token keyword">if</span> batch <span class="token operator">%</span> batch_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token comment" spellcheck="true">#print 'get enough bacth!\n'</span>                train_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>                  train_label <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_label<span class="token punctuation">)</span>                  <span class="token keyword">yield</span> <span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>                  train_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  train_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  batch <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># data for validation </span><span class="token keyword">def</span> <span class="token function">generateValidData</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true">#print 'generateValidData...'</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>          valid_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          valid_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          batch <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              url <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            batch <span class="token operator">+=</span> <span class="token number">1</span>              img <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'src/'</span> <span class="token operator">+</span> url<span class="token punctuation">)</span>            img <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              valid_data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>img<span class="token punctuation">)</span>              label <span class="token operator">=</span> load_img<span class="token punctuation">(</span>filepath <span class="token operator">+</span> <span class="token string">'label/'</span> <span class="token operator">+</span> url<span class="token punctuation">,</span> grayscale<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            label <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>label<span class="token punctuation">)</span>            valid_label<span class="token punctuation">.</span>append<span class="token punctuation">(</span>label<span class="token punctuation">)</span>              <span class="token keyword">if</span> batch <span class="token operator">%</span> batch_size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                  valid_data <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid_data<span class="token punctuation">)</span>                  valid_label <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>valid_label<span class="token punctuation">)</span>                  <span class="token keyword">yield</span> <span class="token punctuation">(</span>valid_data<span class="token punctuation">,</span>valid_label<span class="token punctuation">)</span>                  valid_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  valid_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                  batch <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">def</span> <span class="token function">unet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    inputs <span class="token operator">=</span> Input<span class="token punctuation">(</span><span class="token punctuation">(</span> img_w<span class="token punctuation">,</span> img_h<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    conv1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    conv1 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv1<span class="token punctuation">)</span>    pool1 <span class="token operator">=</span> MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv1<span class="token punctuation">)</span>    conv2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pool1<span class="token punctuation">)</span>    conv2 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv2<span class="token punctuation">)</span>    pool2 <span class="token operator">=</span> MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv2<span class="token punctuation">)</span>    conv3 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pool2<span class="token punctuation">)</span>    conv3 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv3<span class="token punctuation">)</span>    pool3 <span class="token operator">=</span> MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv3<span class="token punctuation">)</span>    conv4 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pool3<span class="token punctuation">)</span>    conv4 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv4<span class="token punctuation">)</span>    pool4 <span class="token operator">=</span> MaxPooling2D<span class="token punctuation">(</span>pool_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv4<span class="token punctuation">)</span>    conv5 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>pool4<span class="token punctuation">)</span>    conv5 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv5<span class="token punctuation">)</span>    up6 <span class="token operator">=</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv5<span class="token punctuation">)</span><span class="token punctuation">,</span> conv4<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    conv6 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>up6<span class="token punctuation">)</span>    conv6 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv6<span class="token punctuation">)</span>    up7 <span class="token operator">=</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv6<span class="token punctuation">)</span><span class="token punctuation">,</span> conv3<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    conv7 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>up7<span class="token punctuation">)</span>    conv7 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv7<span class="token punctuation">)</span>    up8 <span class="token operator">=</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv7<span class="token punctuation">)</span><span class="token punctuation">,</span> conv2<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    conv8 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>up8<span class="token punctuation">)</span>    conv8 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv8<span class="token punctuation">)</span>    up9 <span class="token operator">=</span> concatenate<span class="token punctuation">(</span><span class="token punctuation">[</span>UpSampling2D<span class="token punctuation">(</span>size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv8<span class="token punctuation">)</span><span class="token punctuation">,</span> conv1<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    conv9 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>up9<span class="token punctuation">)</span>    conv9 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token string">"same"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv9<span class="token punctuation">)</span>    conv10 <span class="token operator">=</span> Conv2D<span class="token punctuation">(</span>n_label<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">"sigmoid"</span><span class="token punctuation">)</span><span class="token punctuation">(</span>conv9<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#conv10 = Conv2D(n_label, (1, 1), activation="softmax")(conv9)</span>    model <span class="token operator">=</span> Model<span class="token punctuation">(</span>inputs<span class="token operator">=</span>inputs<span class="token punctuation">,</span> outputs<span class="token operator">=</span>conv10<span class="token punctuation">)</span>    model<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'Adam'</span><span class="token punctuation">,</span> loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span> metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>     EPOCHS <span class="token operator">=</span> <span class="token number">10</span>    BS <span class="token operator">=</span> <span class="token number">32</span>    <span class="token comment" spellcheck="true">#model = SegNet()  </span>    model <span class="token operator">=</span> unet<span class="token punctuation">(</span><span class="token punctuation">)</span>    modelcheck <span class="token operator">=</span> ModelCheckpoint<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">'model'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>monitor<span class="token operator">=</span><span class="token string">'val_acc'</span><span class="token punctuation">,</span>save_best_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>      callable <span class="token operator">=</span> <span class="token punctuation">[</span>modelcheck<span class="token punctuation">]</span>      train_set<span class="token punctuation">,</span>val_set <span class="token operator">=</span> get_train_val<span class="token punctuation">(</span><span class="token punctuation">)</span>    train_numb <span class="token operator">=</span> len<span class="token punctuation">(</span>train_set<span class="token punctuation">)</span>      valid_numb <span class="token operator">=</span> len<span class="token punctuation">(</span>val_set<span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"the number of train data is"</span><span class="token punctuation">,</span>train_numb<span class="token punctuation">)</span>      <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"the number of val data is"</span><span class="token punctuation">,</span>valid_numb<span class="token punctuation">)</span>    H <span class="token operator">=</span> model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>generator<span class="token operator">=</span>generateData<span class="token punctuation">(</span>BS<span class="token punctuation">,</span>train_set<span class="token punctuation">)</span><span class="token punctuation">,</span>steps_per_epoch<span class="token operator">=</span>train_numb<span class="token operator">//</span>BS<span class="token punctuation">,</span>epochs<span class="token operator">=</span>EPOCHS<span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                      validation_data<span class="token operator">=</span>generateValidData<span class="token punctuation">(</span>BS<span class="token punctuation">,</span>val_set<span class="token punctuation">)</span><span class="token punctuation">,</span>validation_steps<span class="token operator">=</span>valid_numb<span class="token operator">//</span>BS<span class="token punctuation">,</span>callbacks<span class="token operator">=</span>callable<span class="token punctuation">,</span>max_q_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># plot the training loss and accuracy</span>    plt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>use<span class="token punctuation">(</span><span class="token string">"ggplot"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>    N <span class="token operator">=</span> EPOCHS    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"loss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train_loss"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"val_loss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val_loss"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"acc"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train_acc"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> H<span class="token punctuation">.</span>history<span class="token punctuation">[</span><span class="token string">"val_acc"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"val_acc"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Training Loss and Accuracy on U-Net Satellite Seg"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"Epoch #"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"Loss/Accuracy"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">"lower left"</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"plot"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">args_parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># construct the argument parse and parse the arguments</span>    ap <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-d"</span><span class="token punctuation">,</span> <span class="token string">"--data"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"training data's path"</span><span class="token punctuation">,</span>                    default<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"--model"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                    help<span class="token operator">=</span><span class="token string">"path to output model"</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-p"</span><span class="token punctuation">,</span> <span class="token string">"--plot"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>str<span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">"plot.png"</span><span class="token punctuation">,</span>                    help<span class="token operator">=</span><span class="token string">"path to output accuracy/loss plot"</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> vars<span class="token punctuation">(</span>ap<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> args<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>      args <span class="token operator">=</span> args_parse<span class="token punctuation">(</span><span class="token punctuation">)</span>    filepath <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>    train<span class="token punctuation">(</span>args<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#predict()  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预测</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> random<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> argparse<span class="token keyword">from</span> keras<span class="token punctuation">.</span>preprocessing<span class="token punctuation">.</span>image <span class="token keyword">import</span> img_to_array<span class="token keyword">from</span> keras<span class="token punctuation">.</span>models <span class="token keyword">import</span> load_model<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoder  os<span class="token punctuation">.</span>environ<span class="token punctuation">[</span><span class="token string">"CUDA_VISIBLE_DEVICES"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"0"</span>TEST_SET <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1.png'</span><span class="token punctuation">,</span><span class="token string">'2.png'</span><span class="token punctuation">,</span><span class="token string">'3.png'</span><span class="token punctuation">]</span>image_size <span class="token operator">=</span> <span class="token number">256</span>classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>   <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">]</span>  labelencoder <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>  labelencoder<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>classes<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">args_parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># construct the argument parse and parse the arguments</span>    ap <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-m"</span><span class="token punctuation">,</span> <span class="token string">"--model"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">"path to trained model model"</span><span class="token punctuation">)</span>    ap<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-s"</span><span class="token punctuation">,</span> <span class="token string">"--stride"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>        help<span class="token operator">=</span><span class="token string">"crop slide stride"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">,</span> default<span class="token operator">=</span>image_size<span class="token punctuation">)</span>    args <span class="token operator">=</span> vars<span class="token punctuation">(</span>ap<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> args<span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># load the trained convolutional neural network</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[INFO] loading network..."</span><span class="token punctuation">)</span>    model <span class="token operator">=</span> load_model<span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token string">"model"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    stride <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">'stride'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>TEST_SET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        path <span class="token operator">=</span> TEST_SET<span class="token punctuation">[</span>n<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#load the image</span>        image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./test/'</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>        h<span class="token punctuation">,</span>w<span class="token punctuation">,</span>_ <span class="token operator">=</span> image<span class="token punctuation">.</span>shape        padding_h <span class="token operator">=</span> <span class="token punctuation">(</span>h<span class="token operator">//</span>stride <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> stride         padding_w <span class="token operator">=</span> <span class="token punctuation">(</span>w<span class="token operator">//</span>stride <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> stride        padding_img <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>padding_h<span class="token punctuation">,</span>padding_w<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        padding_img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span>w<span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#padding_img = padding_img.astype("float") / 255.0</span>        padding_img <span class="token operator">=</span> img_to_array<span class="token punctuation">(</span>padding_img<span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'src:'</span><span class="token punctuation">,</span>padding_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        mask_whole <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>padding_h<span class="token punctuation">,</span>padding_w<span class="token punctuation">)</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>padding_h<span class="token operator">//</span>stride<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>padding_w<span class="token operator">//</span>stride<span class="token punctuation">)</span><span class="token punctuation">:</span>                crop <span class="token operator">=</span> padding_img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">]</span>                _<span class="token punctuation">,</span>ch<span class="token punctuation">,</span>cw <span class="token operator">=</span> crop<span class="token punctuation">.</span>shape                <span class="token keyword">if</span> ch <span class="token operator">!=</span> <span class="token number">256</span> <span class="token operator">or</span> cw <span class="token operator">!=</span> <span class="token number">256</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'invalid size!'</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span>                crop <span class="token operator">=</span> np<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>crop<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>                 pred <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>crop<span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print (np.unique(pred))  </span>                pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">#print 'pred:',pred.shape</span>                mask_whole<span class="token punctuation">[</span>i<span class="token operator">*</span>stride<span class="token punctuation">:</span>i<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">,</span>j<span class="token operator">*</span>stride<span class="token punctuation">:</span>j<span class="token operator">*</span>stride<span class="token operator">+</span>image_size<span class="token punctuation">]</span> <span class="token operator">=</span> pred<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'./predict/pre'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.png'</span><span class="token punctuation">,</span>mask_whole<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>h<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span>w<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> args_parse<span class="token punctuation">(</span><span class="token punctuation">)</span>    predict<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>pspnet<br>pspnet实现详见这位大佬的博客<a href="https://blog.csdn.net/ziyouyi111/article/details/80416935" target="_blank" rel="noopener">https://blog.csdn.net/ziyouyi111/article/details/80416935</a></li><li>deeplabv3+<br>deeplabv3+找官方的博客实现就好了，这里写一下遇到的bug和一些注意事项</li><li>对于tfrecord的制作，要看清图片格式，最好图片格式都是三通道的png</li><li>如果训练自己的数据集，可以在utils中调整各类的权重</li><li>训练过程中，要提前下载好预训练模型，注意自己的bs大小，理论上越大越好</li><li>预测图片时要注意前宽还是后宽，不要调反了</li><li>看miou—————–eval.py</li><li>看验证集预测情况———-vis.py</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语义分割 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语义分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对语义分割样本不平衡的算法调整</title>
      <link href="/2019/07/12/zhen-dui-yu-yi-fen-ge-yang-ben-bu-ping-heng-de-suan-fa-diao-zheng/"/>
      <url>/2019/07/12/zhen-dui-yu-yi-fen-ge-yang-ben-bu-ping-heng-de-suan-fa-diao-zheng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> ospath <span class="token operator">=</span> <span class="token string">"D:/rssrai2019_semantic_segmentation/before_data/colormap_png/"</span><span class="token comment" spellcheck="true">#color图判断</span>path_img<span class="token operator">=</span><span class="token string">"D:/rssrai2019_semantic_segmentation/before_data/Image/Image_png_3/"</span> <span class="token comment" spellcheck="true">#切割原图路径</span>path_class <span class="token operator">=</span> <span class="token string">"D:/rssrai2019_semantic_segmentation/before_data/colormap_png/class/"</span> <span class="token comment" spellcheck="true">#切割灰度图路径</span>path_save <span class="token operator">=</span> <span class="token string">"D:/rssrai2019_semantic_segmentation/before_data/colormap_png/area_strength/"</span> <span class="token comment" spellcheck="true">#保存路径</span>w<span class="token operator">=</span><span class="token number">360</span>h<span class="token operator">=</span><span class="token number">340</span>stride_w<span class="token operator">=</span><span class="token number">180</span>stride_h<span class="token operator">=</span><span class="token number">170</span>x1<span class="token operator">=</span><span class="token number">0</span>y1<span class="token operator">=</span><span class="token number">0</span>x2 <span class="token operator">=</span> wy2 <span class="token operator">=</span> hnum<span class="token operator">=</span><span class="token number">4000</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_label.png"</span><span class="token punctuation">)</span>    x1 <span class="token operator">=</span> <span class="token number">0</span>    y1 <span class="token operator">=</span> <span class="token number">0</span>    x2 <span class="token operator">=</span> w    y2 <span class="token operator">=</span> h    <span class="token keyword">while</span> x2<span class="token operator">&lt;=</span><span class="token number">7200</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> y2<span class="token operator">&lt;=</span><span class="token number">6800</span><span class="token punctuation">:</span>            img1 <span class="token operator">=</span> img<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span>            img2 <span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path_img<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".png"</span><span class="token punctuation">)</span>            img3 <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path_class<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_class.png"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#判断</span>            count_plus<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">for</span> flag_x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">360</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> flag_y <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">340</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    t <span class="token operator">=</span> img1<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>flag_x<span class="token punctuation">,</span>flag_y<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">if</span> t <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        count_plus<span class="token operator">+=</span><span class="token number">1</span>                    <span class="token keyword">if</span> t <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                        count_plus<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">if</span> count_plus<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>                img2_crop <span class="token operator">=</span> img2<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span>                img3_crop <span class="token operator">=</span> img3<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>y1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">)</span>                num<span class="token operator">+=</span><span class="token number">1</span>                path_save_image <span class="token operator">=</span> path_save <span class="token operator">+</span><span class="token string">"image/"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".png"</span>                path_save_label <span class="token operator">=</span> path_save <span class="token operator">+</span> <span class="token string">"label/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span>                path_save_color <span class="token operator">=</span> path_save <span class="token operator">+</span><span class="token string">"color/"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".png"</span>                img1<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path_save_color<span class="token punctuation">)</span>                img2_crop<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path_save_image<span class="token punctuation">)</span>                img3_crop<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path_save_label<span class="token punctuation">)</span>            y1<span class="token operator">+=</span>stride_h            y2<span class="token operator">=</span>y1<span class="token operator">+</span>h        x1<span class="token operator">+=</span>stride_w        x2<span class="token operator">=</span>x1<span class="token operator">+</span>w        y1 <span class="token operator">=</span> <span class="token number">0</span>        y2 <span class="token operator">=</span> h    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"获得图片个数"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于遥感图像而言，将小样本切割重复。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语义分割 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语义分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于PIL库的图像拼接处理操作</title>
      <link href="/2019/07/08/ji-yu-pil-ku-de-tu-xiang-pin-jie-chu-li-cao-zuo/"/>
      <url>/2019/07/08/ji-yu-pil-ku-de-tu-xiang-pin-jie-chu-li-cao-zuo/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> skimage <span class="token keyword">import</span> io<span class="token punctuation">,</span>data<span class="token punctuation">,</span>util<span class="token keyword">def</span> <span class="token function">rotate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>op<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">##旋转90度</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_90<span class="token punctuation">)</span>        <span class="token keyword">return</span> img    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">##旋转180度</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_180<span class="token punctuation">)</span>        <span class="token keyword">return</span> img    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">##旋转270度</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>ROTATE_270<span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">mirror</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>op<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">##左右镜像</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_LEFT_RIGHT<span class="token punctuation">)</span>        <span class="token keyword">return</span> img    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">##上下镜像</span>        img <span class="token operator">=</span> img<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>Image<span class="token punctuation">.</span>FLIP_TOP_BOTTOM<span class="token punctuation">)</span>        <span class="token keyword">return</span> img    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        img1 <span class="token operator">=</span>mirror<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> mirror<span class="token punctuation">(</span>img1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">salt_noise</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>num_noise<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">##只可以处理三通道的图像，加椒盐噪声</span>    rows <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    cols <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> noise <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_noise<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> rows<span class="token punctuation">)</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>cols<span class="token punctuation">)</span>        <span class="token keyword">if</span> noise <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>            img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            img<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">gauss_noise</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> util<span class="token punctuation">.</span>random_noise<span class="token punctuation">(</span>img<span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'gaussian'</span><span class="token punctuation">,</span>seed<span class="token operator">=</span>None<span class="token punctuation">,</span>clip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> img<span class="token keyword">def</span> <span class="token function">cut</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>cut_x<span class="token punctuation">,</span>cut_y<span class="token punctuation">,</span>path<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#输入待切割的图片和需要切割的大小</span>    dx <span class="token operator">=</span> cut_x    dy <span class="token operator">=</span> cut_y    width <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    height <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    x1 <span class="token operator">=</span> <span class="token number">0</span>    y1 <span class="token operator">=</span> <span class="token number">0</span>    x2 <span class="token operator">=</span> cut_x    y2 <span class="token operator">=</span> cut_y    num <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">+</span>t    <span class="token keyword">while</span> x2 <span class="token operator">&lt;=</span> height<span class="token punctuation">:</span>        <span class="token keyword">while</span> y2 <span class="token operator">&lt;=</span>width<span class="token punctuation">:</span>            img2 <span class="token operator">=</span> img<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span>            num<span class="token operator">+=</span><span class="token number">1</span>            path1 <span class="token operator">=</span> path <span class="token operator">+</span> str<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".png"</span>            img2<span class="token punctuation">.</span>save<span class="token punctuation">(</span>path1<span class="token punctuation">)</span>            y1<span class="token operator">+=</span>dy            y2 <span class="token operator">=</span> y1<span class="token operator">+</span>cut_y        x1 <span class="token operator">=</span> x1<span class="token operator">+</span>dx        x2 <span class="token operator">=</span> x1<span class="token operator">+</span>cut_x        y1 <span class="token operator">=</span> <span class="token number">0</span>        y2 <span class="token operator">=</span> cut_y    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"切割图片个数"</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>height<span class="token operator">//</span>dx<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>width<span class="token operator">//</span>dy<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">label_translate</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>op<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#op=1,colormap转label</span>                             <span class="token comment" spellcheck="true">#op=2,label转colormap</span>    width <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    height <span class="token operator">=</span> img<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>T        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>                r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span>  b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">11</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">12</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">13</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">14</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">15</span>        p<span class="token operator">=</span>p<span class="token punctuation">.</span>T        p<span class="token operator">=</span>Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> p    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        p <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>img<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>T        <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>                gray <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>gray <span class="token operator">==</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>T        p <span class="token operator">=</span> Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>p<span class="token punctuation">)</span>        <span class="token keyword">return</span> p<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> <span class="token string">"D:/rssrai2019_semantic_segmentation/before_data/colormap_png/"</span>    path_save <span class="token operator">=</span><span class="token string">"G:/label++/"</span>    t <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_label.png"</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> label_translate<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        img_1<span class="token operator">=</span>img_2<span class="token operator">=</span>img_3<span class="token operator">=</span>img_4<span class="token operator">=</span>img_5<span class="token operator">=</span>img_6<span class="token operator">=</span>img        t<span class="token operator">+=</span>cut<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>path_save<span class="token punctuation">,</span>t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img2 = salt_noise(img, 500000)</span>        t<span class="token operator">+=</span> cut<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img3 = gauss_noise(img)</span>        <span class="token comment" spellcheck="true"># t += cut(img3, 256, 256, path_save, t)</span>        <span class="token comment" spellcheck="true">#img = Image.open(path + str(i) + "_label.png")</span>        img4 <span class="token operator">=</span> rotate<span class="token punctuation">(</span>img_1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        t<span class="token operator">+=</span>cut<span class="token punctuation">(</span>img4<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>path_save<span class="token punctuation">,</span>t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img5 = salt_noise(img4, 500000)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img4<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img6 = gauss_noise(img4)</span>        <span class="token comment" spellcheck="true"># t += cut(img6, 256, 256, path_save, t)</span>        <span class="token comment" spellcheck="true">#img = Image.open(path+str(i)+"_label.png")</span>        img7 <span class="token operator">=</span> rotate<span class="token punctuation">(</span>img_2<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img7<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img8 = salt_noise(img7, 500000)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img7<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img9 = gauss_noise(img7)</span>        <span class="token comment" spellcheck="true"># t += cut(img9, 256, 256, path_save, t)</span>        <span class="token comment" spellcheck="true">#img = Image.open(path+str(i)+"_label.png")</span>        img10 <span class="token operator">=</span> rotate<span class="token punctuation">(</span>img_3<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img10<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img11 = salt_noise(img10, 500000)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img10<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img12 = gauss_noise(img10)</span>        <span class="token comment" spellcheck="true"># t += cut(img12, 256, 256, path_save, t)</span>        <span class="token comment" spellcheck="true">#img = Image.open(path+str(i)+"_label.png")</span>        img13 <span class="token operator">=</span> mirror<span class="token punctuation">(</span>img_4<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img13<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img14 = salt_noise(img13, 500000)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img13<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img15 = gauss_noise(img13)</span>        <span class="token comment" spellcheck="true"># t += cut(img13, 256, 256, path_save, t)</span>        <span class="token comment" spellcheck="true">#img = Image.open(path+str(i)+"_label.png")</span>        img16 <span class="token operator">=</span> mirror<span class="token punctuation">(</span>img_5<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img16<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img17 = salt_noise(img16, 500000)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img_5<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img18 = gauss_noise(img16)</span>        <span class="token comment" spellcheck="true"># t += cut(img18, 256, 256, path_save, t)</span>        <span class="token comment" spellcheck="true">#img = Image.open(path+str(i)+"_label.png")</span>        img19 <span class="token operator">=</span> mirror<span class="token punctuation">(</span>img_6<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img19<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#img20 = salt_noise(img19, 500000)</span>        t <span class="token operator">+=</span> cut<span class="token punctuation">(</span>img19<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> path_save<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img21 = gauss_noise(img18)</span>        <span class="token comment" spellcheck="true"># t += cut(img21, 256, 256, path_save, t)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第%d张图片加强已完成"</span><span class="token operator">%</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语义分割 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语义分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语义分割数据扩增</title>
      <link href="/2019/07/01/yu-yi-fen-ge-shu-ju-kuo-zeng/"/>
      <url>/2019/07/01/yu-yi-fen-ge-shu-ju-kuo-zeng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">def</span> <span class="token function">cut</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>vx<span class="token punctuation">,</span>vy<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>    name1 <span class="token operator">=</span> <span class="token string">"D:/rssrai2019_semantic_segmentation/val/"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">".tif"</span>    name2 <span class="token operator">=</span> <span class="token string">"D:/rssrai2019_semantic_segmentation/val_cut/cut/"</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>name1<span class="token punctuation">)</span>    dx<span class="token operator">=</span><span class="token number">340</span>    dy<span class="token operator">=</span><span class="token number">360</span>    n<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span>t    x1<span class="token operator">=</span><span class="token number">0</span>    y1<span class="token operator">=</span><span class="token number">0</span>    x2<span class="token operator">=</span>vx    y2<span class="token operator">=</span>vy    <span class="token keyword">while</span> x2 <span class="token operator">&lt;=</span><span class="token number">6800</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> y2<span class="token operator">&lt;=</span><span class="token number">7200</span><span class="token punctuation">:</span>            name3 <span class="token operator">=</span> name2 <span class="token operator">+</span> str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".tif"</span>            im2 <span class="token operator">=</span> im<span class="token punctuation">.</span>crop<span class="token punctuation">(</span><span class="token punctuation">(</span>y1<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>y2<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">)</span>            im2<span class="token punctuation">.</span>save<span class="token punctuation">(</span>name3<span class="token punctuation">)</span>            y1<span class="token operator">+=</span>dy            y2 <span class="token operator">=</span> y1<span class="token operator">+</span>vy            n<span class="token operator">+=</span><span class="token number">1</span>        x1<span class="token operator">=</span>x1<span class="token operator">+</span>dx        x2<span class="token operator">=</span>x1<span class="token operator">+</span>vx        y1<span class="token operator">=</span><span class="token number">0</span>        y2<span class="token operator">=</span>vy    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"图片切割成功，切割得到的字图片数为"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token number">-1</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    t<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> cut<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">340</span><span class="token punctuation">,</span><span class="token number">360</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span>        t<span class="token operator">+=</span><span class="token number">400</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>对分割好的图像，将classmap转换成相对应有标签的labelmap的灰度图<br>这里采用的是对所有图片逐像素进行判断，巨废内存好吧。而且这个if判断也太蠢了吧，有没有大佬教我一下怎么简便一下啊。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nppath <span class="token operator">=</span> <span class="token string">'D:/rssrai2019_semantic_segmentation/train_cut/cut_label/'</span>savedpath <span class="token operator">=</span> <span class="token string">'D:/rssrai2019_semantic_segmentation/train_cut/cut_label_2/'</span>filelist <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>path<span class="token operator">+</span>item<span class="token punctuation">)</span>    width <span class="token operator">=</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    height <span class="token operator">=</span> im<span class="token punctuation">.</span>size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    im2<span class="token operator">=</span>im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span>    p<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>im<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token operator">=</span>p<span class="token punctuation">.</span>T    n<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> range<span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>            r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b <span class="token operator">=</span> im<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>            n<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span>  b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">4</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">5</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">7</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">8</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">9</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">11</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">250</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">12</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">13</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">150</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">14</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> g <span class="token operator">==</span> <span class="token number">200</span> <span class="token operator">and</span> b <span class="token operator">==</span> <span class="token number">250</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                p<span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">15</span>    p<span class="token operator">=</span>p<span class="token punctuation">.</span>T    p<span class="token operator">=</span>Image<span class="token punctuation">.</span>fromarray<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    p<span class="token punctuation">.</span>save<span class="token punctuation">(</span>savedpath <span class="token operator">+</span> item<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'item of %s is saved '</span> <span class="token operator">%</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 语义分割 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 语义分割 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境安装tensorflow++++不需要安装Anaconda</title>
      <link href="/2019/06/30/windows-huan-jing-an-zhuang-tensorflow-bu-xu-yao-an-zhuang-anaconda/"/>
      <url>/2019/06/30/windows-huan-jing-an-zhuang-tensorflow-bu-xu-yao-an-zhuang-anaconda/</url>
      
        <content type="html"><![CDATA[<ol><li>python3.7</li><li>pip3 install numpy,如果嫌弃下载速度慢可以加入pip install -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a> +你要的库，亲测速度超快</li><li>pip3 install mkl</li><li>pip3 install protobuf   2,3,4步骤都是tensorflow安装之前所必须依赖的库</li><li>pip3 install tensorflow</li><li>pip list 查看电脑安装了python的什么库</li></ol><p>哎呀，python3.7真是太友好了，3.7版本安装时可以直接添加path到环境中，真是太方便了。<br>最后要是嫌弃python3.7自带的IDE不好，可以下载pycharm的社区版是免费的，中文语言包github上有。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 问题与bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> deeplearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MFC关于实现小程序登陆注册功能的实现</title>
      <link href="/2018/09/06/mfc-guan-yu-shi-xian-xiao-cheng-xu-deng-lu-zhu-ce-gong-neng-de-shi-xian/"/>
      <url>/2018/09/06/mfc-guan-yu-shi-xian-xiao-cheng-xu-deng-lu-zhu-ce-gong-neng-de-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>1.首先我们在头文件和源文件中分别添加InfoFile.h文件和InfoFile.cpp文件，用来进行数据的读写操作。</p><pre class="line-numbers language-c++"><code class="language-c++">// 注册窗口的变量声明private:    CString m_register1; //注册窗口用户名edit控件变量    CString m_register2; //注册窗口密码edit控件变量    CString m_register3; //注册窗口确认密码edit控件变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">//InfoFile.h文件的具体代码#pragma once#include <list>#include <fstream>#include <iostream>#include <string>#define F_LOGIN "./login.ini"using namespace std;class InfoFile{public:    InfoFile();    ~InfoFile();    void writeRegister(char* name, char* pwd); //将注册信息写入操作    void ReadRegister(CString &name, CString &pwd); //从文件中读取用户名密码的操作};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++"><code class="language-c++">//InfoFile.cpp的具体代码#include "stdafx.h"#include "InfoFile.h"InfoFile::InfoFile(){}InfoFile::~InfoFile(){}void InfoFile::ReadRegister(CString &name, CString &pwd){    ifstream ifs;    ifs.open(F_LOGIN); //打开文件    char buf[1024] = {0};    ifs.getline(buf, sizeof(buf));//读取用户名信息    name = CString(buf);    ifs.getline(buf, sizeof(buf));//读取密码信息    pwd = CString(buf);    ifs.close();}void InfoFile::writeRegister(char* name, char* pwd){    ofstream ofs;    ofs.open(F_LOGIN);    ofs<<name<<endl;//写入用户名信息    ofs<<pwd<<endl;//写入密码信息    ofs.close();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/MFC/0.png" alt="用户登录界面"></p><p>2.进入注册对话框的确定按钮进行函数描述</p><pre class="line-numbers language-c++"><code class="language-c++">void CD_register::OnBnClickedButton3(){    UpdateData(TRUE);//更新变量信息    InfoFile file;    CStringA tmp;    CStringA tmp2;    if(m_register2 != m_register3)    {        MessageBox(_T("Inconsistent password!"));    }    else    {        tmp = m_register1;        tmp2 = m_register2;        file.writeRegister(tmp.GetBuffer(), tmp2.GetBuffer());//将char类型转化为CString,并进行用户名和密码的写入        MessageBox(_T("Register success!"));    }    // TODO: Add your control notification handler code here}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.进入登陆界面进行函数配置<br><img src="https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg" data-original="/MFC/1.png" alt="用户登录界面"></p><pre class="line-numbers language-c++"><code class="language-c++">UpdateData(TRUE);    InfoFile file;    CString name, pwd;    file.ReadRegister(name, pwd);    if(name == m_UserName)    {        if(pwd == m_UserPassword)        {            CD_story dlg;            dlg.DoModal();//打开登录后的界面        }        else        {            MessageBox(_T("UserPassword is error!"));        }    }    else    {        MessageBox(_T("UserName is error!"));    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> MFC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
